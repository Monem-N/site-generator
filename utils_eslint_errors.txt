[{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/cache.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":18,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":18,"endColumn":25},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":19,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":20,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":21,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":21,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":62,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'now' is assigned a value but never used.","line":87,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_b' is defined but never used.","line":106,"column":76,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'b' is not defined.","line":107,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":136,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":23},{"ruleId":"no-redeclare","severity":2,"message":"'item' is already defined.","line":161,"column":13,"nodeType":"Identifier","messageId":"redeclared","endLine":161,"endColumn":17},{"ruleId":"no-redeclare","severity":2,"message":"'item' is already defined.","line":193,"column":13,"nodeType":"Identifier","messageId":"redeclared","endLine":193,"endColumn":17}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nvar __assign =\n  (this && this.__assign) ||\n  function () {\n    __assign =\n      Object.assign ||\n      function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n      };\n    return __assign.apply(this, arguments);\n  };\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.ContentCache = void 0;\nvar fs_1 = require('fs');\nvar path_1 = require('path');\nvar crypto_1 = require('crypto');\nvar errors_1 = require('./errors');\n/**\n * Content cache for storing parsed documentation\n */\nvar ContentCache = /** @class */ (function () {\n  function ContentCache(options) {\n    // Set default options first, then override with provided options\n    var defaultOptions = {\n      enabled: true,\n      storageType: 'memory',\n      maxSize: 1000,\n      ttl: 3600000, // 1 hour\n    };\n    this.options = __assign(__assign({}, defaultOptions), options);\n    this.memoryCache = new Map();\n    // Set up filesystem cache if needed\n    if (this.options.storageType === 'filesystem') {\n      this.cacheDir = this.options.cacheDir || path_1.default.join(process.cwd(), '.cache');\n      this.ensureCacheDirectory();\n    } else {\n      this.cacheDir = '';\n    }\n  }\n  /**\n   * Generate a cache key from the input\n   */\n  ContentCache.prototype.generateKey = function (input) {\n    return crypto_1.default.createHash('md5').update(input).digest('hex');\n  };\n  /**\n   * Ensure the cache directory exists\n   */\n  ContentCache.prototype.ensureCacheDirectory = function () {\n    if (!fs_1.default.existsSync(this.cacheDir)) {\n      try {\n        fs_1.default.mkdirSync(this.cacheDir, { recursive: true });\n      } catch (_error) {\n        throw new errors_1.FileSystemError(\n          'Failed to create cache directory: '.concat(this.cacheDir),\n          {\n            directory: this.cacheDir,\n            error: error,\n          }\n        );\n      }\n    }\n  };\n  /**\n   * Get the filesystem path for a cache key\n   */\n  ContentCache.prototype.getCacheFilePath = function (key) {\n    return path_1.default.join(this.cacheDir, ''.concat(key, '.json'));\n  };\n  /**\n   * Check if a cache item is expired\n   */\n  ContentCache.prototype.isExpired = function (item) {\n    if (!this.options.ttl) return false;\n    var now = Date.now();\n    return now - item.timestamp > this.options.ttl;\n  };\n  /**\n   * Clean up expired items from memory cache\n   */\n  // Method to clean up memory cache (currently unused but kept for future use)\n  ContentCache.prototype.cleanExpiredItems = function () {\n    var now = Date.now();\n    for (var _i = 0, _a = this.memoryCache.entries(); _i < _a.length; _i++) {\n      var _c = _a[_i],\n        key = _c[0],\n        item = _c[1];\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n      }\n    }\n  };\n  /**\n  \n    /**\n     * Enforce maximum cache size\n     */\n  ContentCache.prototype.enforceMaxSize = function () {\n    if (!this.options.maxSize) return;\n    if (this.memoryCache.size > this.options.maxSize) {\n      // Remove oldest items first\n      var items = Array.from(this.memoryCache.entries()).sort(function (a, _b) {\n        return a[1].timestamp - b[1].timestamp;\n      });\n      var itemsToRemove = items.slice(0, this.memoryCache.size - this.options.maxSize);\n      for (var _i = 0, itemsToRemove_1 = itemsToRemove; _i < itemsToRemove_1.length; _i++) {\n        var key = itemsToRemove_1[_i][0];\n        this.memoryCache.delete(key);\n      }\n    }\n  };\n  /**\n   * Set an item in the cache\n   */\n  ContentCache.prototype.set = function (input, data) {\n    if (!this.options.enabled) return;\n    var key = this.generateKey(input);\n    var item = {\n      data: data,\n      timestamp: Date.now(),\n      key: key,\n    };\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.set(key, item);\n      this.enforceMaxSize();\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        fs_1.default.writeFileSync(this.getCacheFilePath(key), JSON.stringify(item), 'utf-8');\n      } catch (_error) {\n        throw new errors_1.FileSystemError('Failed to write to cache file: '.concat(key), {\n          key: key,\n          error: error,\n        });\n      }\n    }\n  };\n  /**\n   * Get an item from the cache\n   * @returns The cached data or null if not found or expired\n   */\n  ContentCache.prototype.get = function (input) {\n    if (!this.options.enabled) return null;\n    var key = this.generateKey(input);\n    if (this.options.storageType === 'memory') {\n      var item = this.memoryCache.get(key);\n      if (!item) return null;\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n        return null;\n      }\n      return item.data;\n    } else if (this.options.storageType === 'filesystem') {\n      var filePath = this.getCacheFilePath(key);\n      if (!fs_1.default.existsSync(filePath)) return null;\n      try {\n        var content = fs_1.default.readFileSync(filePath, 'utf-8');\n        var item = JSON.parse(content);\n        if (this.isExpired(item)) {\n          fs_1.default.unlinkSync(filePath);\n          return null;\n        }\n        return item.data;\n      } catch (error) {\n        // If there's an error reading the cache, just return null\n        return null;\n      }\n    }\n    return null;\n  };\n  /**\n   * Check if an item exists in the cache and is not expired\n   */\n  ContentCache.prototype.has = function (input) {\n    if (!this.options.enabled) return false;\n    var key = this.generateKey(input);\n    if (this.options.storageType === 'memory') {\n      var item = this.memoryCache.get(key);\n      if (!item) return false;\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n        return false;\n      }\n      return true;\n    } else if (this.options.storageType === 'filesystem') {\n      var filePath = this.getCacheFilePath(key);\n      if (!fs_1.default.existsSync(filePath)) return false;\n      try {\n        var content = fs_1.default.readFileSync(filePath, 'utf-8');\n        var item = JSON.parse(content);\n        if (this.isExpired(item)) {\n          fs_1.default.unlinkSync(filePath);\n          return false;\n        }\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  };\n  /**\n   * Delete an item from the cache\n   */\n  ContentCache.prototype.delete = function (input) {\n    if (!this.options.enabled) return;\n    var key = this.generateKey(input);\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.delete(key);\n    } else if (this.options.storageType === 'filesystem') {\n      var filePath = this.getCacheFilePath(key);\n      if (fs_1.default.existsSync(filePath)) {\n        try {\n          fs_1.default.unlinkSync(filePath);\n        } catch (error) {\n          throw new errors_1.FileSystemError('Failed to delete cache file: '.concat(key), {\n            key: key,\n            error: error,\n          });\n        }\n      }\n    }\n  };\n  /**\n   * Clear all items from the cache\n   */\n  ContentCache.prototype.clear = function () {\n    if (!this.options.enabled) return;\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.clear();\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        var files = fs_1.default.readdirSync(this.cacheDir);\n        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n          var file = files_1[_i];\n          if (file.endsWith('.json')) {\n            fs_1.default.unlinkSync(path_1.default.join(this.cacheDir, file));\n          }\n        }\n      } catch (error) {\n        throw new errors_1.FileSystemError(\n          'Failed to clear cache directory: '.concat(this.cacheDir),\n          {\n            directory: this.cacheDir,\n            error: error,\n          }\n        );\n      }\n    }\n  };\n  /**\n   * Get cache statistics\n   */\n  ContentCache.prototype.getStats = function () {\n    if (this.options.storageType === 'memory') {\n      return {\n        enabled: this.options.enabled,\n        storageType: this.options.storageType,\n        size: this.memoryCache.size,\n        maxSize: this.options.maxSize,\n        ttl: this.options.ttl,\n      };\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        var files = fs_1.default.readdirSync(this.cacheDir);\n        var cacheFiles = files.filter(function (file) {\n          return file.endsWith('.json');\n        });\n        return {\n          enabled: this.options.enabled,\n          storageType: this.options.storageType,\n          size: cacheFiles.length,\n          ttl: this.options.ttl,\n        };\n      } catch (error) {\n        return {\n          enabled: this.options.enabled,\n          storageType: this.options.storageType,\n          size: 0,\n          ttl: this.options.ttl,\n        };\n      }\n    }\n    return {\n      enabled: this.options.enabled,\n      storageType: 'memory',\n      size: 0,\n    };\n  };\n  return ContentCache;\n})();\nexports.ContentCache = ContentCache;\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/cache.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'now' is assigned a value but never used.","line":105,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as fs from 'fs';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { FileSystemError } from './errors.js';\n\n/**\n * Cache storage types\n */\nexport type CacheStorageType = 'memory' | 'filesystem';\n\n/**\n * Cache options\n */\nexport interface CacheOptions {\n  enabled: boolean;\n  storageType: CacheStorageType;\n  maxSize?: number; // Maximum number of items in memory cache\n  ttl?: number; // Time to live in milliseconds\n  cacheDir?: string; // Directory for filesystem cache\n}\n\n/**\n * Cache item with metadata\n */\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  key: string;\n}\n\n/**\n * Content cache for storing parsed documentation\n */\nexport class ContentCache<T> {\n  private options: CacheOptions;\n  private memoryCache: Map<string, CacheItem<T>>;\n  private cacheDir: string;\n\n  constructor(options: CacheOptions) {\n    // Set default options first, then override with provided options\n    const defaultOptions = {\n      enabled: true,\n      storageType: 'memory' as 'memory' | 'filesystem',\n      maxSize: 1000,\n      ttl: 3600000, // 1 hour\n    };\n\n    this.options = { ...defaultOptions, ...options };\n\n    this.memoryCache = new Map<string, CacheItem<T>>();\n\n    // Set up filesystem cache if needed\n    if (this.options.storageType === 'filesystem') {\n      this.cacheDir = this.options.cacheDir || path.join(process.cwd(), '.cache');\n      this.ensureCacheDirectory();\n    } else {\n      this.cacheDir = '';\n    }\n  }\n\n  /**\n   * Generate a cache key from the input\n   */\n  private generateKey(input: string): string {\n    return crypto.createHash('md5').update(input).digest('hex');\n  }\n\n  /**\n   * Ensure the cache directory exists\n   */\n  private ensureCacheDirectory(): void {\n    if (!fs.existsSync(this.cacheDir)) {\n      try {\n        fs.mkdirSync(this.cacheDir, { recursive: true });\n      } catch (_error) {\n        throw new FileSystemError(`Failed to create cache directory: ${this.cacheDir}`, {\n          directory: this.cacheDir,\n          error: _error,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the filesystem path for a cache key\n   */\n  private getCacheFilePath(key: string): string {\n    return path.join(this.cacheDir, `${key}.json`);\n  }\n\n  /**\n   * Check if a cache item is expired\n   */\n  private isExpired(item: CacheItem<T>): boolean {\n    if (!this.options.ttl) return false;\n    const now = Date.now();\n    return now - item.timestamp > this.options.ttl;\n  }\n\n  /**\n   * Clean up expired items from memory cache\n   */\n  // Method to clean up memory cache (currently unused but kept for future use)\n  private cleanExpiredItems(): void {\n    const now = Date.now();\n    for (const [key, item] of this.memoryCache.entries()) {\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n      }\n    }\n  }\n\n  /**\n\n  /**\n   * Enforce maximum cache size\n   */\n  private enforceMaxSize(): void {\n    if (!this.options.maxSize) return;\n\n    if (this.memoryCache.size > this.options.maxSize) {\n      // Remove oldest items first\n      const items = Array.from(this.memoryCache.entries()).sort(\n        (a, b) => a[1].timestamp - b[1].timestamp\n      );\n\n      const itemsToRemove = items.slice(0, this.memoryCache.size - this.options.maxSize);\n      for (const [key] of itemsToRemove) {\n        this.memoryCache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Set an item in the cache\n   */\n  set(input: string, data: T): void {\n    if (!this.options.enabled) return;\n\n    const key = this.generateKey(input);\n    const item: CacheItem<T> = {\n      data,\n      timestamp: Date.now(),\n      key,\n    };\n\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.set(key, item);\n      this.enforceMaxSize();\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        fs.writeFileSync(this.getCacheFilePath(key), JSON.stringify(item), 'utf-8');\n      } catch (_error) {\n        throw new FileSystemError(`Failed to write to cache file: ${key}`, {\n          key,\n          error: _error,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get an item from the cache\n   * @returns The cached data or null if not found or expired\n   */\n  get(input: string): T | null {\n    if (!this.options.enabled) return null;\n\n    const key = this.generateKey(input);\n\n    if (this.options.storageType === 'memory') {\n      const item = this.memoryCache.get(key);\n\n      if (!item) return null;\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n        return null;\n      }\n\n      return item.data;\n    } else if (this.options.storageType === 'filesystem') {\n      const filePath = this.getCacheFilePath(key);\n\n      if (!fs.existsSync(filePath)) return null;\n\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const item: CacheItem<T> = JSON.parse(content);\n\n        if (this.isExpired(item)) {\n          fs.unlinkSync(filePath);\n          return null;\n        }\n\n        return item.data;\n      } catch (error) {\n        // If there's an error reading the cache, just return null\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if an item exists in the cache and is not expired\n   */\n  has(input: string): boolean {\n    if (!this.options.enabled) return false;\n\n    const key = this.generateKey(input);\n\n    if (this.options.storageType === 'memory') {\n      const item = this.memoryCache.get(key);\n      if (!item) return false;\n      if (this.isExpired(item)) {\n        this.memoryCache.delete(key);\n        return false;\n      }\n      return true;\n    } else if (this.options.storageType === 'filesystem') {\n      const filePath = this.getCacheFilePath(key);\n\n      if (!fs.existsSync(filePath)) return false;\n\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const item: CacheItem<T> = JSON.parse(content);\n\n        if (this.isExpired(item)) {\n          fs.unlinkSync(filePath);\n          return false;\n        }\n\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Delete an item from the cache\n   */\n  delete(input: string): void {\n    if (!this.options.enabled) return;\n\n    const key = this.generateKey(input);\n\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.delete(key);\n    } else if (this.options.storageType === 'filesystem') {\n      const filePath = this.getCacheFilePath(key);\n\n      if (fs.existsSync(filePath)) {\n        try {\n          fs.unlinkSync(filePath);\n        } catch (error) {\n          throw new FileSystemError(`Failed to delete cache file: ${key}`, {\n            key,\n            error,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Clear all items from the cache\n   */\n  clear(): void {\n    if (!this.options.enabled) return;\n\n    if (this.options.storageType === 'memory') {\n      this.memoryCache.clear();\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        const files = fs.readdirSync(this.cacheDir);\n\n        for (const file of files) {\n          if (file.endsWith('.json')) {\n            fs.unlinkSync(path.join(this.cacheDir, file));\n          }\n        }\n      } catch (error) {\n        throw new FileSystemError(`Failed to clear cache directory: ${this.cacheDir}`, {\n          directory: this.cacheDir,\n          error,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): {\n    enabled: boolean;\n    storageType: CacheStorageType;\n    size: number;\n    maxSize?: number;\n    ttl?: number;\n  } {\n    if (this.options.storageType === 'memory') {\n      return {\n        enabled: this.options.enabled,\n        storageType: this.options.storageType,\n        size: this.memoryCache.size,\n        maxSize: this.options.maxSize,\n        ttl: this.options.ttl,\n      };\n    } else if (this.options.storageType === 'filesystem') {\n      try {\n        const files = fs.readdirSync(this.cacheDir);\n        const cacheFiles = files.filter(file => file.endsWith('.json'));\n\n        return {\n          enabled: this.options.enabled,\n          storageType: this.options.storageType,\n          size: cacheFiles.length,\n          ttl: this.options.ttl,\n        };\n      } catch (error) {\n        return {\n          enabled: this.options.enabled,\n          storageType: this.options.storageType,\n          size: 0,\n          ttl: this.options.ttl,\n        };\n      }\n    }\n\n    return {\n      enabled: this.options.enabled,\n      storageType: 'memory',\n      size: 0,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/config-presets.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/config-presets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/config-validator.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":4,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":5,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":5,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.validateConfig = validateConfig;\nvar fs_1 = require('fs');\nvar path_1 = require('path');\n/**\n * Validates a WebsiteGeneratorConfig object\n * @param config The configuration to validate\n * @throws Error if the configuration is invalid\n */\nfunction validateConfig(config) {\n  var errors = [];\n  // Required fields\n  if (!config.projectName) {\n    errors.push('Missing required field: projectName');\n  }\n  if (!config.sourceDir) {\n    errors.push('Missing required field: sourceDir');\n  } else if (!fs_1.default.existsSync(config.sourceDir)) {\n    errors.push('Source directory does not exist: '.concat(config.sourceDir));\n  }\n  if (!config.outputDir) {\n    errors.push('Missing required field: outputDir');\n  } else {\n    // Ensure output directory is writable\n    try {\n      var testDir = path_1.default.resolve(config.outputDir);\n      var parentDir = path_1.default.dirname(testDir);\n      if (!fs_1.default.existsSync(parentDir)) {\n        errors.push('Parent directory of output directory does not exist: '.concat(parentDir));\n      } else {\n        // Check if we can write to the parent directory\n        try {\n          fs_1.default.accessSync(parentDir, fs_1.default.constants.W_OK);\n        } catch (_error) {\n          errors.push('Cannot write to parent directory of output directory: '.concat(parentDir));\n        }\n      }\n    } catch (_error) {\n      errors.push('Invalid output directory path: '.concat(config.outputDir));\n    }\n  }\n  // Parser configuration\n  if (!config.parser) {\n    errors.push('Missing required field: parser');\n  } else {\n    // Validate parser plugins\n    if (config.parser.plugins) {\n      if (!Array.isArray(config.parser.plugins)) {\n        errors.push('parser.plugins must be an array');\n      }\n    }\n    // Validate custom formats\n    if (config.parser.customFormats) {\n      if (typeof config.parser.customFormats !== 'object') {\n        errors.push('parser.customFormats must be an object');\n      } else {\n        for (var _i = 0, _a = Object.entries(config.parser.customFormats); _i < _a.length; _i++) {\n          var _b = _a[_i],\n            format = _b[0],\n            formatConfig = _b[1];\n          if (!formatConfig.parser) {\n            errors.push('Missing parser for custom format: '.concat(format));\n          }\n        }\n      }\n    }\n  }\n  // Generator configuration\n  if (!config.generator) {\n    errors.push('Missing required field: generator');\n  } else {\n    // Validate templates\n    if (!config.generator.templates) {\n      errors.push('Missing required field: generator.templates');\n    } else if (typeof config.generator.templates !== 'object') {\n      errors.push('generator.templates must be an object');\n    } else {\n      // Check if required templates exist\n      var requiredTemplates = ['page', 'section'];\n      for (\n        var _c = 0, requiredTemplates_1 = requiredTemplates;\n        _c < requiredTemplates_1.length;\n        _c++\n      ) {\n        var template = requiredTemplates_1[_c];\n        if (!config.generator.templates[template]) {\n          errors.push('Missing required template: '.concat(template));\n        }\n      }\n    }\n    // Validate component naming\n    if (config.generator.componentNaming) {\n      if (\n        config.generator.componentNaming.style &&\n        !['PascalCase', 'camelCase'].includes(config.generator.componentNaming.style)\n      ) {\n        errors.push('generator.componentNaming.style must be either \"PascalCase\" or \"camelCase\"');\n      }\n    }\n  }\n  // Design system configuration\n  if (!config.designSystem) {\n    errors.push('Missing required field: designSystem');\n  } else {\n    if (!config.designSystem.name) {\n      errors.push('Missing required field: designSystem.name');\n    }\n    if (!config.designSystem.importPath) {\n      errors.push('Missing required field: designSystem.importPath');\n    }\n    if (!config.designSystem.components) {\n      errors.push('Missing required field: designSystem.components');\n    } else if (typeof config.designSystem.components !== 'object') {\n      errors.push('designSystem.components must be an object');\n    }\n  }\n  // Testing configuration\n  if (!config.testing) {\n    errors.push('Missing required field: testing');\n  } else {\n    if (!config.testing.framework) {\n      errors.push('Missing required field: testing.framework');\n    } else if (!['jest', 'vitest'].includes(config.testing.framework)) {\n      errors.push('testing.framework must be either \"jest\" or \"vitest\"');\n    }\n    if (!config.testing.coverage) {\n      errors.push('Missing required field: testing.coverage');\n    } else {\n      if (typeof config.testing.coverage.enabled !== 'boolean') {\n        errors.push('testing.coverage.enabled must be a boolean');\n      }\n      if (\n        config.testing.coverage.threshold !== undefined &&\n        (typeof config.testing.coverage.threshold !== 'number' ||\n          config.testing.coverage.threshold < 0 ||\n          config.testing.coverage.threshold > 100)\n      ) {\n        errors.push('testing.coverage.threshold must be a number between 0 and 100');\n      }\n    }\n    if (!config.testing.components) {\n      errors.push('Missing required field: testing.components');\n    } else {\n      if (typeof config.testing.components.unit !== 'boolean') {\n        errors.push('testing.components.unit must be a boolean');\n      }\n      if (typeof config.testing.components.integration !== 'boolean') {\n        errors.push('testing.components.integration must be a boolean');\n      }\n      if (\n        config.testing.components.e2e !== undefined &&\n        typeof config.testing.components.e2e !== 'boolean'\n      ) {\n        errors.push('testing.components.e2e must be a boolean');\n      }\n    }\n  }\n  // Build configuration\n  if (!config.build) {\n    errors.push('Missing required field: build');\n  } else {\n    if (!config.build.optimization) {\n      errors.push('Missing required field: build.optimization');\n    } else {\n      if (typeof config.build.optimization.minify !== 'boolean') {\n        errors.push('build.optimization.minify must be a boolean');\n      }\n      if (typeof config.build.optimization.splitChunks !== 'boolean') {\n        errors.push('build.optimization.splitChunks must be a boolean');\n      }\n      if (typeof config.build.optimization.treeshaking !== 'boolean') {\n        errors.push('build.optimization.treeshaking must be a boolean');\n      }\n    }\n    if (!config.build.assets) {\n      errors.push('Missing required field: build.assets');\n    } else {\n      if (!config.build.assets.images) {\n        errors.push('Missing required field: build.assets.images');\n      } else {\n        if (typeof config.build.assets.images.optimize !== 'boolean') {\n          errors.push('build.assets.images.optimize must be a boolean');\n        }\n        if (!Array.isArray(config.build.assets.images.formats)) {\n          errors.push('build.assets.images.formats must be an array');\n        }\n      }\n      if (!config.build.assets.fonts) {\n        errors.push('Missing required field: build.assets.fonts');\n      } else {\n        if (typeof config.build.assets.fonts.preload !== 'boolean') {\n          errors.push('build.assets.fonts.preload must be a boolean');\n        }\n        if (!Array.isArray(config.build.assets.fonts.formats)) {\n          errors.push('build.assets.fonts.formats must be an array');\n        }\n      }\n    }\n  }\n  // Performance configuration\n  if (!config.performance) {\n    errors.push('Missing required field: performance');\n  } else {\n    if (typeof config.performance.lazyLoading !== 'boolean') {\n      errors.push('performance.lazyLoading must be a boolean');\n    }\n    if (typeof config.performance.prefetching !== 'boolean') {\n      errors.push('performance.prefetching must be a boolean');\n    }\n    if (!config.performance.caching) {\n      errors.push('Missing required field: performance.caching');\n    } else {\n      if (typeof config.performance.caching.enabled !== 'boolean') {\n        errors.push('performance.caching.enabled must be a boolean');\n      }\n      if (!['memory', 'filesystem'].includes(config.performance.caching.strategy)) {\n        errors.push('performance.caching.strategy must be either \"memory\" or \"filesystem\"');\n      }\n    }\n  }\n  // Accessibility configuration\n  if (!config.accessibility) {\n    errors.push('Missing required field: accessibility');\n  } else {\n    if (!config.accessibility.wcag) {\n      errors.push('Missing required field: accessibility.wcag');\n    } else {\n      if (!['A', 'AA', 'AAA'].includes(config.accessibility.wcag.level)) {\n        errors.push('accessibility.wcag.level must be one of \"A\", \"AA\", or \"AAA\"');\n      }\n      if (typeof config.accessibility.wcag.automated !== 'boolean') {\n        errors.push('accessibility.wcag.automated must be a boolean');\n      }\n    }\n    if (typeof config.accessibility.aria !== 'boolean') {\n      errors.push('accessibility.aria must be a boolean');\n    }\n    if (typeof config.accessibility.keyboard !== 'boolean') {\n      errors.push('accessibility.keyboard must be a boolean');\n    }\n  }\n  // Plugins configuration\n  if (config.plugins !== undefined) {\n    if (!Array.isArray(config.plugins)) {\n      errors.push('plugins must be an array');\n    } else {\n      for (var i = 0; i < config.plugins.length; i++) {\n        var plugin = config.plugins[i];\n        if (!plugin.name) {\n          errors.push('Plugin at index '.concat(i, ' is missing required field: name'));\n        }\n      }\n    }\n  }\n  // If there are any errors, throw an error with all the validation messages\n  if (errors.length > 0) {\n    throw new Error(\n      'Configuration validation failed:\\n'.concat(\n        errors\n          .map(function (e) {\n            return '- '.concat(e);\n          })\n          .join('\\n')\n      )\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/config-validator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2094,2097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2094,2097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebsiteGeneratorConfig } from '../../config/generator.config.js';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Validates a WebsiteGeneratorConfig object\n * @param config The configuration to validate\n * @throws Error if the configuration is invalid\n */\nexport function validateConfig(config: WebsiteGeneratorConfig): void {\n  const errors: string[] = [];\n\n  // Required fields\n  if (!config.projectName) {\n    errors.push('Missing required field: projectName');\n  }\n\n  if (!config.sourceDir) {\n    errors.push('Missing required field: sourceDir');\n  } else if (!fs.existsSync(config.sourceDir)) {\n    errors.push(`Source directory does not exist: ${config.sourceDir}`);\n  }\n\n  if (!config.outputDir) {\n    errors.push('Missing required field: outputDir');\n  } else {\n    // Ensure output directory is writable\n    try {\n      const testDir = path.resolve(config.outputDir);\n      const parentDir = path.dirname(testDir);\n\n      if (!fs.existsSync(parentDir)) {\n        errors.push(`Parent directory of output directory does not exist: ${parentDir}`);\n      } else {\n        // Check if we can write to the parent directory\n        try {\n          fs.accessSync(parentDir, fs.constants.W_OK);\n        } catch (_error) {\n          errors.push(`Cannot write to parent directory of output directory: ${parentDir}`);\n        }\n      }\n    } catch (_error) {\n      errors.push(`Invalid output directory path: ${config.outputDir}`);\n    }\n  }\n\n  // Parser configuration\n  if (!config.parser) {\n    errors.push('Missing required field: parser');\n  } else {\n    // Validate parser plugins\n    if (config.parser.plugins) {\n      if (!Array.isArray(config.parser.plugins)) {\n        errors.push('parser.plugins must be an array');\n      }\n    }\n\n    // Validate custom formats\n    if (config.parser.customFormats) {\n      if (typeof config.parser.customFormats !== 'object') {\n        errors.push('parser.customFormats must be an object');\n      } else {\n        for (const [format, formatConfig] of Object.entries(config.parser.customFormats) as [\n          string,\n          any\n        ][]) {\n          if (!formatConfig.parser) {\n            errors.push(`Missing parser for custom format: ${format}`);\n          }\n        }\n      }\n    }\n  }\n\n  // Generator configuration\n  if (!config.generator) {\n    errors.push('Missing required field: generator');\n  } else {\n    // Validate templates\n    if (!config.generator.templates) {\n      errors.push('Missing required field: generator.templates');\n    } else if (typeof config.generator.templates !== 'object') {\n      errors.push('generator.templates must be an object');\n    } else {\n      // Check if required templates exist\n      const requiredTemplates = ['page', 'section'];\n      for (const template of requiredTemplates) {\n        if (!config.generator.templates[template]) {\n          errors.push(`Missing required template: ${template}`);\n        }\n      }\n    }\n\n    // Validate component naming\n    if (config.generator.componentNaming) {\n      if (\n        config.generator.componentNaming.style &&\n        !['PascalCase', 'camelCase'].includes(config.generator.componentNaming.style)\n      ) {\n        errors.push('generator.componentNaming.style must be either \"PascalCase\" or \"camelCase\"');\n      }\n    }\n  }\n\n  // Design system configuration\n  if (!config.designSystem) {\n    errors.push('Missing required field: designSystem');\n  } else {\n    if (!config.designSystem.name) {\n      errors.push('Missing required field: designSystem.name');\n    }\n\n    if (!config.designSystem.importPath) {\n      errors.push('Missing required field: designSystem.importPath');\n    }\n\n    if (!config.designSystem.components) {\n      errors.push('Missing required field: designSystem.components');\n    } else if (typeof config.designSystem.components !== 'object') {\n      errors.push('designSystem.components must be an object');\n    }\n  }\n\n  // Testing configuration\n  if (!config.testing) {\n    errors.push('Missing required field: testing');\n  } else {\n    if (!config.testing.framework) {\n      errors.push('Missing required field: testing.framework');\n    } else if (!['jest', 'vitest'].includes(config.testing.framework)) {\n      errors.push('testing.framework must be either \"jest\" or \"vitest\"');\n    }\n\n    if (!config.testing.coverage) {\n      errors.push('Missing required field: testing.coverage');\n    } else {\n      if (typeof config.testing.coverage.enabled !== 'boolean') {\n        errors.push('testing.coverage.enabled must be a boolean');\n      }\n\n      if (\n        config.testing.coverage.threshold !== undefined &&\n        (typeof config.testing.coverage.threshold !== 'number' ||\n          config.testing.coverage.threshold < 0 ||\n          config.testing.coverage.threshold > 100)\n      ) {\n        errors.push('testing.coverage.threshold must be a number between 0 and 100');\n      }\n    }\n\n    if (!config.testing.components) {\n      errors.push('Missing required field: testing.components');\n    } else {\n      if (typeof config.testing.components.unit !== 'boolean') {\n        errors.push('testing.components.unit must be a boolean');\n      }\n\n      if (typeof config.testing.components.integration !== 'boolean') {\n        errors.push('testing.components.integration must be a boolean');\n      }\n\n      if (\n        config.testing.components.e2e !== undefined &&\n        typeof config.testing.components.e2e !== 'boolean'\n      ) {\n        errors.push('testing.components.e2e must be a boolean');\n      }\n    }\n  }\n\n  // Build configuration\n  if (!config.build) {\n    errors.push('Missing required field: build');\n  } else {\n    if (!config.build.optimization) {\n      errors.push('Missing required field: build.optimization');\n    } else {\n      if (typeof config.build.optimization.minify !== 'boolean') {\n        errors.push('build.optimization.minify must be a boolean');\n      }\n\n      if (typeof config.build.optimization.splitChunks !== 'boolean') {\n        errors.push('build.optimization.splitChunks must be a boolean');\n      }\n\n      if (typeof config.build.optimization.treeshaking !== 'boolean') {\n        errors.push('build.optimization.treeshaking must be a boolean');\n      }\n    }\n\n    if (!config.build.assets) {\n      errors.push('Missing required field: build.assets');\n    } else {\n      if (!config.build.assets.images) {\n        errors.push('Missing required field: build.assets.images');\n      } else {\n        if (typeof config.build.assets.images.optimize !== 'boolean') {\n          errors.push('build.assets.images.optimize must be a boolean');\n        }\n\n        if (!Array.isArray(config.build.assets.images.formats)) {\n          errors.push('build.assets.images.formats must be an array');\n        }\n      }\n\n      if (!config.build.assets.fonts) {\n        errors.push('Missing required field: build.assets.fonts');\n      } else {\n        if (typeof config.build.assets.fonts.preload !== 'boolean') {\n          errors.push('build.assets.fonts.preload must be a boolean');\n        }\n\n        if (!Array.isArray(config.build.assets.fonts.formats)) {\n          errors.push('build.assets.fonts.formats must be an array');\n        }\n      }\n    }\n  }\n\n  // Performance configuration\n  if (!config.performance) {\n    errors.push('Missing required field: performance');\n  } else {\n    if (typeof config.performance.lazyLoading !== 'boolean') {\n      errors.push('performance.lazyLoading must be a boolean');\n    }\n\n    if (typeof config.performance.prefetching !== 'boolean') {\n      errors.push('performance.prefetching must be a boolean');\n    }\n\n    if (!config.performance.caching) {\n      errors.push('Missing required field: performance.caching');\n    } else {\n      if (typeof config.performance.caching.enabled !== 'boolean') {\n        errors.push('performance.caching.enabled must be a boolean');\n      }\n\n      if (!['memory', 'filesystem'].includes(config.performance.caching.strategy)) {\n        errors.push('performance.caching.strategy must be either \"memory\" or \"filesystem\"');\n      }\n    }\n  }\n\n  // Accessibility configuration\n  if (!config.accessibility) {\n    errors.push('Missing required field: accessibility');\n  } else {\n    if (!config.accessibility.wcag) {\n      errors.push('Missing required field: accessibility.wcag');\n    } else {\n      if (!['A', 'AA', 'AAA'].includes(config.accessibility.wcag.level)) {\n        errors.push('accessibility.wcag.level must be one of \"A\", \"AA\", or \"AAA\"');\n      }\n\n      if (typeof config.accessibility.wcag.automated !== 'boolean') {\n        errors.push('accessibility.wcag.automated must be a boolean');\n      }\n    }\n\n    if (typeof config.accessibility.aria !== 'boolean') {\n      errors.push('accessibility.aria must be a boolean');\n    }\n\n    if (typeof config.accessibility.keyboard !== 'boolean') {\n      errors.push('accessibility.keyboard must be a boolean');\n    }\n  }\n\n  // Plugins configuration\n  if (config.plugins !== undefined) {\n    if (!Array.isArray(config.plugins)) {\n      errors.push('plugins must be an array');\n    } else {\n      for (let i = 0; i < config.plugins.length; i++) {\n        const plugin = config.plugins[i];\n        if (!plugin.name) {\n          errors.push(`Plugin at index ${i} is missing required field: name`);\n        }\n      }\n    }\n  }\n\n  // If there are any errors, throw an error with all the validation messages\n  if (errors.length > 0) {\n    throw new Error(`Configuration validation failed:\\n${errors.map(e => `- ${e}`).join('\\n')}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dependency-graph.js","messages":[{"ruleId":"no-redeclare","severity":2,"message":"'path' is already defined.","line":137,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":137,"endColumn":15},{"ruleId":"no-redeclare","severity":2,"message":"'node' is already defined.","line":138,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":138,"endColumn":15},{"ruleId":"no-redeclare","severity":2,"message":"'path' is already defined.","line":248,"column":9,"nodeType":"Identifier","messageId":"redeclared","endLine":248,"endColumn":13},{"ruleId":"no-redeclare","severity":2,"message":"'nodeData' is already defined.","line":249,"column":9,"nodeType":"Identifier","messageId":"redeclared","endLine":249,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.DependencyGraph = void 0;\n/**\n * A graph of dependencies between files\n */\nvar DependencyGraph = /** @class */ (function () {\n  function DependencyGraph() {\n    /**\n     * The nodes in the graph\n     */\n    this.nodes = new Map();\n  }\n  /**\n   * Add a node to the graph\n   * @param path The file path\n   * @param lastModified The last modified time of the file\n   * @returns The node\n   */\n  DependencyGraph.prototype.addNode = function (path, lastModified) {\n    var existingNode = this.nodes.get(path);\n    if (existingNode) {\n      // Update the last modified time\n      existingNode.lastModified = lastModified;\n      return existingNode;\n    }\n    // Create a new node\n    var node = {\n      path: path,\n      dependencies: new Set(),\n      dependents: new Set(),\n      lastModified: lastModified,\n      changed: false,\n      outputs: new Set(),\n    };\n    this.nodes.set(path, node);\n    return node;\n  };\n  /**\n   * Get a node from the graph\n   * @param path The file path\n   * @returns The node, or undefined if it doesn't exist\n   */\n  DependencyGraph.prototype.getNode = function (path) {\n    return this.nodes.get(path);\n  };\n  /**\n   * Remove a node from the graph\n   * @param path The file path\n   */\n  DependencyGraph.prototype.removeNode = function (path) {\n    var node = this.nodes.get(path);\n    if (!node) {\n      return;\n    }\n    // Remove this node from its dependencies' dependents\n    for (var _i = 0, _a = node.dependencies; _i < _a.length; _i++) {\n      var dependency = _a[_i];\n      var dependencyNode = this.nodes.get(dependency);\n      if (dependencyNode) {\n        dependencyNode.dependents.delete(path);\n      }\n    }\n    // Remove this node from its dependents' dependencies\n    for (var _b = 0, _c = node.dependents; _b < _c.length; _b++) {\n      var dependent = _c[_b];\n      var dependentNode = this.nodes.get(dependent);\n      if (dependentNode) {\n        dependentNode.dependencies.delete(path);\n      }\n    }\n    // Remove the node\n    this.nodes.delete(path);\n  };\n  /**\n   * Add a dependency between two nodes\n   * @param from The dependent file path\n   * @param to The dependency file path\n   * @param fromLastModified The last modified time of the dependent file\n   * @param toLastModified The last modified time of the dependency file\n   */\n  DependencyGraph.prototype.addDependency = function (from, to, fromLastModified, toLastModified) {\n    // Add the nodes if they don't exist\n    var fromNode = this.addNode(from, fromLastModified);\n    var toNode = this.addNode(to, toLastModified);\n    // Add the dependency\n    fromNode.dependencies.add(to);\n    toNode.dependents.add(from);\n  };\n  /**\n   * Add an output file for a node\n   * @param from The source file path\n   * @param output The output file path\n   * @param fromLastModified The last modified time of the source file\n   */\n  DependencyGraph.prototype.addOutput = function (from, output, fromLastModified) {\n    // Add the node if it doesn't exist\n    var fromNode = this.addNode(from, fromLastModified);\n    // Add the output\n    fromNode.outputs.add(output);\n  };\n  /**\n   * Mark a node as changed\n   * @param path The file path\n   * @param lastModified The new last modified time of the file\n   */\n  DependencyGraph.prototype.markChanged = function (path, lastModified) {\n    var node = this.nodes.get(path);\n    if (!node) {\n      return;\n    }\n    // Update the last modified time and mark as changed\n    node.lastModified = lastModified;\n    node.changed = true;\n  };\n  /**\n   * Get all files that need to be regenerated\n   * @returns The files that need to be regenerated\n   */\n  DependencyGraph.prototype.getFilesToRegenerate = function () {\n    var result = new Set();\n    // First, add all changed files\n    for (var _i = 0, _a = this.nodes.entries(); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        path = _b[0],\n        node = _b[1];\n      if (node.changed) {\n        result.add(path);\n      }\n    }\n    // Then, add all files that depend on changed files\n    var added = true;\n    while (added) {\n      added = false;\n      for (var _c = 0, _d = this.nodes.entries(); _c < _d.length; _c++) {\n        var _e = _d[_c],\n          path = _e[0],\n          node = _e[1];\n        if (result.has(path)) {\n          continue;\n        }\n        // Check if any of this node's dependencies have changed\n        for (var _f = 0, _g = node.dependencies; _f < _g.length; _f++) {\n          var dependency = _g[_f];\n          if (result.has(dependency)) {\n            result.add(path);\n            added = true;\n            break;\n          }\n        }\n      }\n    }\n    return Array.from(result);\n  };\n  /**\n   * Get all output files that need to be regenerated\n   * @returns The output files that need to be regenerated\n   */\n  DependencyGraph.prototype.getOutputsToRegenerate = function () {\n    var result = new Set();\n    var filesToRegenerate = this.getFilesToRegenerate();\n    // Add all outputs of files that need to be regenerated\n    for (\n      var _i = 0, filesToRegenerate_1 = filesToRegenerate;\n      _i < filesToRegenerate_1.length;\n      _i++\n    ) {\n      var path = filesToRegenerate_1[_i];\n      var node = this.nodes.get(path);\n      if (node) {\n        for (var _a = 0, _b = node.outputs; _a < _b.length; _a++) {\n          var output = _b[_a];\n          result.add(output);\n        }\n      }\n    }\n    return Array.from(result);\n  };\n  /**\n   * Reset the changed state of all nodes\n   */\n  DependencyGraph.prototype.resetChangedState = function () {\n    for (var _i = 0, _a = this.nodes.values(); _i < _a.length; _i++) {\n      var node = _a[_i];\n      node.changed = false;\n    }\n  };\n  /**\n   * Get all nodes in the graph\n   * @returns All nodes in the graph\n   */\n  DependencyGraph.prototype.getAllNodes = function () {\n    return Array.from(this.nodes.values());\n  };\n  /**\n   * Get the number of nodes in the graph\n   * @returns The number of nodes\n   */\n  DependencyGraph.prototype.size = function () {\n    return this.nodes.size;\n  };\n  /**\n   * Clear the graph\n   */\n  DependencyGraph.prototype.clear = function () {\n    this.nodes.clear();\n  };\n  /**\n   * Serialize the graph to JSON\n   * @returns The serialized graph\n   */\n  DependencyGraph.prototype.toJSON = function () {\n    var nodes = {};\n    for (var _i = 0, _a = this.nodes.entries(); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        path = _b[0],\n        node = _b[1];\n      nodes[path] = {\n        dependencies: Array.from(node.dependencies),\n        dependents: Array.from(node.dependents),\n        lastModified: node.lastModified,\n        outputs: Array.from(node.outputs),\n      };\n    }\n    return { nodes: nodes };\n  };\n  /**\n   * Deserialize the graph from JSON\n   * @param json The serialized graph\n   * @returns The deserialized graph\n   */\n  DependencyGraph.fromJSON = function (json) {\n    var graph = new DependencyGraph();\n    if (!json.nodes || typeof json.nodes !== 'object') {\n      return graph;\n    }\n    var nodes = json.nodes;\n    // First, add all nodes\n    for (var _i = 0, _a = Object.entries(nodes); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        path = _b[0],\n        nodeData = _b[1];\n      graph.addNode(path, nodeData.lastModified);\n    }\n    // Then, add all dependencies and outputs\n    for (var _c = 0, _d = Object.entries(nodes); _c < _d.length; _c++) {\n      var _e = _d[_c],\n        path = _e[0],\n        nodeData = _e[1];\n      var node = graph.getNode(path);\n      if (!node) {\n        continue;\n      }\n      // Add dependencies\n      for (var _f = 0, _g = nodeData.dependencies; _f < _g.length; _f++) {\n        var dependency = _g[_f];\n        var dependencyNode = graph.getNode(dependency);\n        if (dependencyNode) {\n          node.dependencies.add(dependency);\n          dependencyNode.dependents.add(path);\n        }\n      }\n      // Add outputs\n      for (var _h = 0, _j = nodeData.outputs; _h < _j.length; _h++) {\n        var output = _j[_h];\n        node.outputs.add(output);\n      }\n    }\n    return graph;\n  };\n  return DependencyGraph;\n})();\nexports.DependencyGraph = DependencyGraph;\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dependency-graph.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dev-server-class.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":151,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":151,"endColumn":27},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":152,"column":10,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":152,"endColumn":23},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":153,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":153,"endColumn":27},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":154,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":154,"endColumn":35},{"ruleId":"@typescript-eslint/no-this-alias","severity":2,"message":"Unexpected aliasing of 'this' to local variable.","line":175,"column":11,"nodeType":"Identifier","messageId":"thisAssignment","endLine":175,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5107,5185],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5669,5715],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-this-alias","severity":2,"message":"Unexpected aliasing of 'this' to local variable.","line":215,"column":11,"nodeType":"Identifier","messageId":"thisAssignment","endLine":215,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6322,6352],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-fallthrough","severity":2,"message":"Expected a 'break' statement before 'case'.","line":233,"column":11,"nodeType":"SwitchCase","messageId":"case","endLine":235,"endColumn":56},{"ruleId":"no-fallthrough","severity":2,"message":"Expected a 'break' statement before 'case'.","line":240,"column":11,"nodeType":"SwitchCase","messageId":"case","endLine":241,"endColumn":35},{"ruleId":"no-redeclare","severity":2,"message":"'content' is already defined.","line":308,"column":15,"nodeType":"Identifier","messageId":"redeclared","endLine":308,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":362,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":362,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11115,11158],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nvar __assign =\n  (this && this.__assign) ||\n  function () {\n    __assign =\n      Object.assign ||\n      function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n      };\n    return __assign.apply(this, arguments);\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator['throw'](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nvar __generator =\n  (this && this.__generator) ||\n  function (thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: [],\n      },\n      f,\n      y,\n      t,\n      g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);\n    return (\n      (g.next = verb(0)),\n      (g['throw'] = verb(1)),\n      (g['return'] = verb(2)),\n      typeof Symbol === 'function' &&\n        (g[Symbol.iterator] = function () {\n          return this;\n        }),\n      g\n    );\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n    function step(op) {\n      if (f) throw new TypeError('Generator is already executing.');\n      while ((g && ((g = 0), op[0] && (_ = 0)), _))\n        try {\n          if (\n            ((f = 1),\n            y &&\n              (t =\n                op[0] & 2\n                  ? y['return']\n                  : op[0]\n                  ? y['throw'] || ((t = y['return']) && t.call(y), 0)\n                  : y.next) &&\n              !(t = t.call(y, op[1])).done)\n          )\n            return t;\n          if (((y = 0), t)) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n            case 4:\n              _.label++;\n              return { value: op[1], done: false };\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n            case 7:\n              op = _.ops.pop();\n              _.trys.pop();\n              continue;\n            default:\n              if (\n                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\n                (op[0] === 6 || op[0] === 2)\n              ) {\n                _ = 0;\n                continue;\n              }\n              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                _.label = op[1];\n                break;\n              }\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n                _.ops.push(op);\n                break;\n              }\n              if (t[2]) _.ops.pop();\n              _.trys.pop();\n              continue;\n          }\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n      if (op[0] & 5) throw op[1];\n      return { value: op[0] ? op[1] : void 0, done: true };\n    }\n  };\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.DevServer = void 0;\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar chokidar = require('chokidar');\n/**\n * A development server for the generated website\n */\nvar DevServer = /** @class */ (function () {\n  function DevServer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.server = null;\n    this.watcher = null;\n    this.options = __assign(\n      { port: 3000, rootDir: './public', watchDir: './src', livereload: true },\n      options\n    );\n  }\n  /**\n   * Start the server\n   */\n  DevServer.prototype.start = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create the server\n            this.server = http.createServer(this.handleRequest.bind(this));\n            // Start the server\n            return [\n              4 /*yield*/,\n              new Promise(function (resolve) {\n                _this.server.listen(_this.options.port, function () {\n                  console.log('Server started at http://localhost:'.concat(_this.options.port));\n                  resolve();\n                });\n              }),\n            ];\n          case 1:\n            // Start the server\n            _a.sent();\n            // Watch for file changes\n            if (this.options.watchDir) {\n              this.watcher = chokidar.watch(this.options.watchDir, {\n                ignored: /(^|[/\\\\])\\..|node_modules/,\n                persistent: true,\n              });\n              this.watcher.on('change', function (path) {\n                console.log('File '.concat(path, ' changed'));\n                _this.notifyClients();\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Stop the server\n   */\n  DevServer.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.server) return [3 /*break*/, 2];\n            return [\n              4 /*yield*/,\n              new Promise(function (resolve) {\n                _this.server.close(function () {\n                  console.log('Server stopped');\n                  _this.server = null;\n                  resolve();\n                });\n              }),\n            ];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!this.watcher) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.watcher.close()];\n          case 3:\n            _a.sent();\n            this.watcher = null;\n            _a.label = 4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Handle HTTP requests\n   */\n  DevServer.prototype.handleRequest = function (req, res) {\n    // Get the URL\n    var url = req.url || '/';\n    // Get the file path\n    var filePath = path.join(this.options.rootDir || '', url === '/' ? 'index.html' : url);\n    // Check if the file exists\n    if (fs.existsSync(filePath)) {\n      // Get the file extension\n      var ext = path.extname(filePath);\n      // Set the content type\n      var contentType = 'text/plain';\n      switch (ext) {\n        case '.html':\n          contentType = 'text/html';\n          break;\n        case '.css':\n          contentType = 'text/css';\n          break;\n        case '.js':\n          contentType = 'application/javascript';\n          break;\n        case '.json':\n          contentType = 'application/json';\n          break;\n        case '.png':\n          contentType = 'image/png';\n          break;\n        case '.jpg':\n        case '.jpeg':\n          contentType = 'image/jpeg';\n          break;\n        case '.gif':\n          contentType = 'image/gif';\n          break;\n        case '.svg':\n          contentType = 'image/svg+xml';\n          break;\n      }\n      // Read the file\n      var content = fs.readFileSync(filePath, 'utf-8');\n      // Inject live reload script if enabled and the file is HTML\n      if (this.options.livereload && ext === '.html') {\n        content = this.injectLiveReloadScript(content);\n      }\n      // Send the response\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content);\n    } else if (\n      fs.existsSync(this.options.rootDir || '') &&\n      fs.statSync(this.options.rootDir || '').isDirectory()\n    ) {\n      // Check if the URL is a directory\n      var dirPath = path.join(this.options.rootDir || '', url);\n      if (fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {\n        // Get the directory contents\n        var files = fs.readdirSync(dirPath);\n        // Check if there's an index.html file\n        if (files.includes('index.html')) {\n          // Read the index.html file\n          var content = fs.readFileSync(path.join(dirPath, 'index.html'), 'utf-8');\n          // Inject live reload script if enabled\n          if (this.options.livereload) {\n            content = this.injectLiveReloadScript(content);\n          }\n          // Send the response\n          res.writeHead(200, { 'Content-Type': 'text/html' });\n          res.end(content);\n        } else {\n          // Send a directory listing\n          var listing =\n            '\\n            <html>\\n              <head>\\n                <title>Directory Listing</title>\\n              </head>\\n              <body>\\n                <h1>Directory Listing</h1>\\n                <ul>\\n                  '.concat(\n              files\n                .map(function (file) {\n                  return '<li><a href=\"'\n                    .concat(path.join(url, file), '\">')\n                    .concat(file, '</a></li>');\n                })\n                .join(''),\n              '\\n                </ul>\\n              </body>\\n            </html>\\n          '\n            );\n          // Send the response\n          res.writeHead(200, { 'Content-Type': 'text/html' });\n          res.end(listing);\n        }\n      } else {\n        // Send a 404 response\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      }\n    } else {\n      // Send a 404 response\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('404 Not Found');\n    }\n  };\n  /**\n   * Inject live reload script into HTML content\n   */\n  DevServer.prototype.injectLiveReloadScript = function (content) {\n    // Check if the script is already injected\n    if (content.includes('livereload.js')) {\n      return content;\n    }\n    // Inject the script before the closing </body> tag\n    var script =\n      \"<script>document.write('<script src=\\\"http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1\\\"></script>')</script>\";\n    return content.replace('</body>', ''.concat(script, '</body>'));\n  };\n  /**\n   * Notify clients to reload\n   */\n  DevServer.prototype.notifyClients = function () {\n    // This would normally send a message to connected WebSocket clients\n    console.log('Notifying clients to reload');\n  };\n  return DevServer;\n})();\nexports.DevServer = DevServer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dev-server-class.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":58,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":58,"endColumn":19,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1143,1144],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1187,1258],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1554,1590],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":85,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":85,"endColumn":21,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1815,1816],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1841,1871],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6155,6198],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as http from 'http';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as chokidar from 'chokidar';\n\n/**\n * Options for the DevServer\n */\nexport interface DevServerOptions {\n  /**\n   * The port to run the server on\n   */\n  port?: number;\n\n  /**\n   * The root directory to serve files from\n   */\n  rootDir?: string;\n\n  /**\n   * The directory to watch for changes\n   */\n  watchDir?: string;\n\n  /**\n   * Whether to enable live reload\n   */\n  livereload?: boolean;\n}\n\n/**\n * A development server for the generated website\n */\nexport class DevServer {\n  private options: DevServerOptions;\n  private server: http.Server | null = null;\n  private watcher: chokidar.FSWatcher | null = null;\n\n  constructor(options: DevServerOptions = {}) {\n    this.options = {\n      port: 3000,\n      rootDir: './public',\n      watchDir: './src',\n      livereload: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Start the server\n   */\n  async start(): Promise<void> {\n    // Create the server\n    this.server = http.createServer(this.handleRequest.bind(this));\n\n    // Start the server\n    await new Promise<void>(resolve => {\n      this.server!.listen(this.options.port, () => {\n        console.log(`Server started at http://localhost:${this.options.port}`);\n        resolve();\n      });\n    });\n\n    // Watch for file changes\n    if (this.options.watchDir) {\n      this.watcher = chokidar.watch(this.options.watchDir, {\n        ignored: /(^|[/\\\\])\\..|node_modules/,\n        persistent: true,\n      });\n\n      this.watcher.on('change', path => {\n        console.log(`File ${path} changed`);\n        this.notifyClients();\n      });\n    }\n  }\n\n  /**\n   * Stop the server\n   */\n  async stop(): Promise<void> {\n    // Stop the server\n    if (this.server) {\n      await new Promise<void>(resolve => {\n        this.server!.close(() => {\n          console.log('Server stopped');\n          this.server = null;\n          resolve();\n        });\n      });\n    }\n\n    // Stop the watcher\n    if (this.watcher) {\n      await this.watcher.close();\n      this.watcher = null;\n    }\n  }\n\n  /**\n   * Handle HTTP requests\n   */\n  private handleRequest(req: http.IncomingMessage, res: http.ServerResponse): void {\n    // Get the URL\n    const url = req.url || '/';\n\n    // Get the file path\n    const filePath = path.join(this.options.rootDir || '', url === '/' ? 'index.html' : url);\n\n    // Check if the file exists\n    if (fs.existsSync(filePath)) {\n      // Get the file extension\n      const ext = path.extname(filePath);\n\n      // Set the content type\n      let contentType = 'text/plain';\n\n      switch (ext) {\n        case '.html':\n          contentType = 'text/html';\n          break;\n        case '.css':\n          contentType = 'text/css';\n          break;\n        case '.js':\n          contentType = 'application/javascript';\n          break;\n        case '.json':\n          contentType = 'application/json';\n          break;\n        case '.png':\n          contentType = 'image/png';\n          break;\n        case '.jpg':\n        case '.jpeg':\n          contentType = 'image/jpeg';\n          break;\n        case '.gif':\n          contentType = 'image/gif';\n          break;\n        case '.svg':\n          contentType = 'image/svg+xml';\n          break;\n      }\n\n      // Read the file\n      let content = fs.readFileSync(filePath, 'utf-8');\n\n      // Inject live reload script if enabled and the file is HTML\n      if (this.options.livereload && ext === '.html') {\n        content = this.injectLiveReloadScript(content);\n      }\n\n      // Send the response\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content);\n    } else if (\n      fs.existsSync(this.options.rootDir || '') &&\n      fs.statSync(this.options.rootDir || '').isDirectory()\n    ) {\n      // Check if the URL is a directory\n      const dirPath = path.join(this.options.rootDir || '', url);\n\n      if (fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {\n        // Get the directory contents\n        const files = fs.readdirSync(dirPath);\n\n        // Check if there's an index.html file\n        if (files.includes('index.html')) {\n          // Read the index.html file\n          let content = fs.readFileSync(path.join(dirPath, 'index.html'), 'utf-8');\n\n          // Inject live reload script if enabled\n          if (this.options.livereload) {\n            content = this.injectLiveReloadScript(content);\n          }\n\n          // Send the response\n          res.writeHead(200, { 'Content-Type': 'text/html' });\n          res.end(content);\n        } else {\n          // Send a directory listing\n          const listing = `\n            <html>\n              <head>\n                <title>Directory Listing</title>\n              </head>\n              <body>\n                <h1>Directory Listing</h1>\n                <ul>\n                  ${files\n                    .map(file => `<li><a href=\"${path.join(url, file)}\">${file}</a></li>`)\n                    .join('')}\n                </ul>\n              </body>\n            </html>\n          `;\n\n          // Send the response\n          res.writeHead(200, { 'Content-Type': 'text/html' });\n          res.end(listing);\n        }\n      } else {\n        // Send a 404 response\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      }\n    } else {\n      // Send a 404 response\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('404 Not Found');\n    }\n  }\n\n  /**\n   * Inject live reload script into HTML content\n   */\n  private injectLiveReloadScript(content: string): string {\n    // Check if the script is already injected\n    if (content.includes('livereload.js')) {\n      return content;\n    }\n\n    // Inject the script before the closing </body> tag\n    const script = `<script>document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1\"></script>')</script>`;\n\n    return content.replace('</body>', `${script}</body>`);\n  }\n\n  /**\n   * Notify clients to reload\n   */\n  private notifyClients(): void {\n    // This would normally send a message to connected WebSocket clients\n    console.log('Notifying clients to reload');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dev-server.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":5,"column":17,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":6,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":7,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":7,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":8,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":8,"endColumn":25},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":9,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":9,"endColumn":25},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":10,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":10,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1277,1414],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1419,1501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1582,1658],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1703,1787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1835,1916],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2062,2133],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.startDevServer = startDevServer;\nexports.injectLiveReloadScript = injectLiveReloadScript;\nvar express_1 = require('express');\nvar http_1 = require('http');\nvar path_1 = require('path');\nvar fs_1 = require('fs');\nvar ws_1 = require('ws');\nvar chalk_1 = require('chalk');\n/**\n * Creates and starts a development server for the generated website\n * @param outputDir The directory containing the generated website\n * @param port The port to run the server on\n * @returns A function to stop the server\n */\nfunction startDevServer(outputDir, port) {\n  if (port === void 0) {\n    port = 3000;\n  }\n  var app = (0, express_1.default)();\n  var server = http_1.default.createServer(app);\n  var wss = new ws_1.default.Server({ server: server });\n  // Serve static files from the output directory\n  app.use(express_1.default.static(outputDir));\n  // Serve index.html for all routes (SPA support)\n  app.get('*', function (_req, res) {\n    var indexPath = path_1.default.join(outputDir, 'index.html');\n    if (fs_1.default.existsSync(indexPath)) {\n      res.sendFile(indexPath);\n    } else {\n      res.status(404).send('Not found');\n    }\n  });\n  // Start the server\n  server.listen(port, function () {\n    console.log(\n      chalk_1.default.green(\n        '[SUCCESS] Development server started at http://localhost:'.concat(port)\n      )\n    );\n    console.log(chalk_1.default.blue('[INFO] Serving files from '.concat(outputDir)));\n  });\n  // WebSocket for live reload\n  wss.on('connection', function (ws) {\n    console.log(chalk_1.default.blue('[INFO] Client connected to live reload'));\n    ws.on('error', function (error) {\n      console.log(chalk_1.default.red('[ERROR] WebSocket error: '.concat(error.message)));\n    });\n    ws.on('close', function () {\n      console.log(chalk_1.default.blue('[INFO] Client disconnected from live reload'));\n    });\n  });\n  // Function to notify clients to reload\n  // Return a function to stop the server\n  return function () {\n    server.close();\n    console.log(chalk_1.default.blue('[INFO] Development server stopped'));\n  };\n}\n/**\n * Injects live reload script into HTML files\n * @param outputDir The directory containing the generated website\n */\nfunction injectLiveReloadScript(outputDir, port) {\n  if (port === void 0) {\n    port = 3000;\n  }\n  var liveReloadScript =\n    \"\\n<script>\\n  (function() {\\n    const socket = new WebSocket('ws://localhost:\".concat(\n      port,\n      \"');\\n    socket.addEventListener('message', (event) => {\\n      const data = JSON.parse(event.data);\\n      if (data.type === 'reload') {\\n        console.log('Reloading page...');\\n        window.location.reload();\\n      }\\n    });\\n    socket.addEventListener('close', () => {\\n      console.log('Live reload disconnected. Attempting to reconnect in 5 seconds...');\\n      setTimeout(() => {\\n        window.location.reload();\\n      }, 5000);\\n    });\\n  })();\\n</script>\\n\"\n    );\n  // Find all HTML files in the output directory\n  var findHtmlFiles = function (dir) {\n    var results = [];\n    var files = fs_1.default.readdirSync(dir);\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n      var file = files_1[_i];\n      var filePath = path_1.default.join(dir, file);\n      var stat = fs_1.default.statSync(filePath);\n      if (stat.isDirectory()) {\n        results.push.apply(results, findHtmlFiles(filePath));\n      } else if (file.endsWith('.html')) {\n        results.push(filePath);\n      }\n    }\n    return results;\n  };\n  var htmlFiles = findHtmlFiles(outputDir);\n  // Inject the live reload script into each HTML file\n  for (var _i = 0, htmlFiles_1 = htmlFiles; _i < htmlFiles_1.length; _i++) {\n    var file = htmlFiles_1[_i];\n    var content = fs_1.default.readFileSync(file, 'utf-8');\n    // Check if the script is already injected\n    if (!content.includes(\"new WebSocket('ws://localhost:\")) {\n      // Inject before the closing </body> tag\n      content = content.replace('</body>', ''.concat(liveReloadScript, '</body>'));\n      fs_1.default.writeFileSync(file, content);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/dev-server.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1030,1123],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1128,1194],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1268,1334],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1372,1440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1483,1554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1696,1757],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport * as http from 'http';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { WebSocketServer } from 'ws';\nimport * as chalk from 'chalk';\n\n/**\n * Creates and starts a development server for the generated website\n * @param outputDir The directory containing the generated website\n * @param port The port to run the server on\n * @returns A function to stop the server\n */\nexport function startDevServer(outputDir: string, port = 3000): () => void {\n  const app = express();\n  const server = http.createServer(app);\n  const wss = new WebSocketServer({ server });\n\n  // Serve static files from the output directory\n  app.use(express.static(outputDir));\n\n  // Serve index.html for all routes (SPA support)\n  app.get('*', (_req, res) => {\n    const indexPath = path.join(outputDir, 'index.html');\n    if (fs.existsSync(indexPath)) {\n      res.sendFile(indexPath);\n    } else {\n      res.status(404).send('Not found');\n    }\n  });\n\n  // Start the server\n  server.listen(port, () => {\n    console.log(chalk.green(`[SUCCESS] Development server started at http://localhost:${port}`));\n    console.log(chalk.blue(`[INFO] Serving files from ${outputDir}`));\n  });\n\n  // WebSocket for live reload\n  wss.on('connection', ws => {\n    console.log(chalk.blue('[INFO] Client connected to live reload'));\n\n    ws.on('error', error => {\n      console.log(chalk.red(`[ERROR] WebSocket error: ${error.message}`));\n    });\n\n    ws.on('close', () => {\n      console.log(chalk.blue('[INFO] Client disconnected from live reload'));\n    });\n  });\n\n  // Function to notify clients to reload\n\n  // Return a function to stop the server\n  return () => {\n    server.close();\n    console.log(chalk.blue('[INFO] Development server stopped'));\n  };\n}\n\n/**\n * Injects live reload script into HTML files\n * @param outputDir The directory containing the generated website\n */\nexport function injectLiveReloadScript(outputDir: string, port = 3000): void {\n  const liveReloadScript = `\n<script>\n  (function() {\n    const socket = new WebSocket('ws://localhost:${port}');\n    socket.addEventListener('message', (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'reload') {\n        console.log('Reloading page...');\n        window.location.reload();\n      }\n    });\n    socket.addEventListener('close', () => {\n      console.log('Live reload disconnected. Attempting to reconnect in 5 seconds...');\n      setTimeout(() => {\n        window.location.reload();\n      }, 5000);\n    });\n  })();\n</script>\n`;\n\n  // Find all HTML files in the output directory\n  const findHtmlFiles = (dir: string): string[] => {\n    const results: string[] = [];\n    const files = fs.readdirSync(dir);\n\n    for (const file of files) {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n\n      if (stat.isDirectory()) {\n        results.push(...findHtmlFiles(filePath));\n      } else if (file.endsWith('.html')) {\n        results.push(filePath);\n      }\n    }\n\n    return results;\n  };\n\n  const htmlFiles = findHtmlFiles(outputDir);\n\n  // Inject the live reload script into each HTML file\n  for (const file of htmlFiles) {\n    let content = fs.readFileSync(file, 'utf-8');\n\n    // Check if the script is already injected\n    if (!content.includes(\"new WebSocket('ws://localhost:\")) {\n      // Inject before the closing </body> tag\n      content = content.replace('</body>', `${liveReloadScript}</body>`);\n      fs.writeFileSync(file, content);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/errors.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_promise' is defined but never used.","line":333,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":333,"endColumn":62},{"ruleId":"@typescript-eslint/no-this-alias","severity":2,"message":"Unexpected aliasing of 'this' to local variable.","line":355,"column":7,"nodeType":"Identifier","messageId":"thisAssignment","endLine":355,"endColumn":12},{"ruleId":"no-sparse-arrays","severity":2,"message":"Unexpected comma in middle of array.","line":366,"column":26,"nodeType":"ArrayExpression","messageId":"unexpectedSparseArray","endLine":366,"endColumn":37},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":381,"column":13,"nodeType":"ReturnStatement","messageId":"unreachableCode","endLine":381,"endColumn":37},{"ruleId":"no-sparse-arrays","severity":2,"message":"Unexpected comma in middle of array.","line":401,"column":24,"nodeType":"ArrayExpression","messageId":"unexpectedSparseArray","endLine":401,"endColumn":35}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nvar __extends =\n  (this && this.__extends) ||\n  (function () {\n    var extendStatics = function (d, b) {\n      extendStatics =\n        Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array &&\n          function (d, b) {\n            d.__proto__ = b;\n          }) ||\n        function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n      return extendStatics(d, b);\n    };\n    return function (d, b) {\n      if (typeof b !== 'function' && b !== null)\n        throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');\n      extendStatics(d, b);\n      function __() {\n        this.constructor = d;\n      }\n      d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());\n    };\n  })();\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator['throw'](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nvar __generator =\n  (this && this.__generator) ||\n  function (thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: [],\n      },\n      f,\n      y,\n      t,\n      g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);\n    return (\n      (g.next = verb(0)),\n      (g['throw'] = verb(1)),\n      (g['return'] = verb(2)),\n      typeof Symbol === 'function' &&\n        (g[Symbol.iterator] = function () {\n          return this;\n        }),\n      g\n    );\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n    function step(op) {\n      if (f) throw new TypeError('Generator is already executing.');\n      while ((g && ((g = 0), op[0] && (_ = 0)), _))\n        try {\n          if (\n            ((f = 1),\n            y &&\n              (t =\n                op[0] & 2\n                  ? y['return']\n                  : op[0]\n                  ? y['throw'] || ((t = y['return']) && t.call(y), 0)\n                  : y.next) &&\n              !(t = t.call(y, op[1])).done)\n          )\n            return t;\n          if (((y = 0), t)) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n            case 4:\n              _.label++;\n              return { value: op[1], done: false };\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n            case 7:\n              op = _.ops.pop();\n              _.trys.pop();\n              continue;\n            default:\n              if (\n                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\n                (op[0] === 6 || op[0] === 2)\n              ) {\n                _ = 0;\n                continue;\n              }\n              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                _.label = op[1];\n                break;\n              }\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n                _.ops.push(op);\n                break;\n              }\n              if (t[2]) _.ops.pop();\n              _.trys.pop();\n              continue;\n          }\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n      if (op[0] & 5) throw op[1];\n      return { value: op[0] ? op[1] : void 0, done: true };\n    }\n  };\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.ValidationError =\n  exports.TemplateError =\n  exports.NotImplementedError =\n  exports.FileSystemError =\n  exports.PluginError =\n  exports.BuildError =\n  exports.GeneratorError =\n  exports.ParserError =\n  exports.ConfigurationError =\n  exports.SiteGeneratorError =\n    void 0;\nexports.setupGlobalErrorHandler = setupGlobalErrorHandler;\nexports.withErrorHandling = withErrorHandling;\nexports.tryCatch = tryCatch;\nexports.tryCatchSync = tryCatchSync;\n/**\n * Base error class for all site generator errors\n * Provides standardized error handling with error codes and contextual information\n */\nvar SiteGeneratorError = /** @class */ (function (_super) {\n  __extends(SiteGeneratorError, _super);\n  function SiteGeneratorError(message, code, context) {\n    var _this = _super.call(this, message) || this;\n    _this.name = _this.constructor.name;\n    _this.code = code;\n    _this.context = context;\n    // Capture stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_this, _this.constructor);\n    }\n    return _this;\n  }\n  /**\n   * Returns a formatted error message with context information\n   */\n  SiteGeneratorError.prototype.getFormattedMessage = function () {\n    var message = '['.concat(this.code, '] ').concat(this.message);\n    if (this.context && Object.keys(this.context).length > 0) {\n      message += '\\nContext:';\n      for (var _i = 0, _a = Object.entries(this.context); _i < _a.length; _i++) {\n        var _b = _a[_i],\n          key = _b[0],\n          value = _b[1];\n        message += '\\n  '.concat(key, ': ').concat(JSON.stringify(value));\n      }\n    }\n    return message;\n  };\n  return SiteGeneratorError;\n})(Error);\nexports.SiteGeneratorError = SiteGeneratorError;\n/**\n * Error thrown when there's an issue with configuration\n */\nvar ConfigurationError = /** @class */ (function (_super) {\n  __extends(ConfigurationError, _super);\n  function ConfigurationError(message, context) {\n    return _super.call(this, message, 'CONFIG_ERROR', context) || this;\n  }\n  return ConfigurationError;\n})(SiteGeneratorError);\nexports.ConfigurationError = ConfigurationError;\n/**\n * Error thrown when there's an issue with parsing documentation\n */\nvar ParserError = /** @class */ (function (_super) {\n  __extends(ParserError, _super);\n  function ParserError(message, context) {\n    return _super.call(this, message, 'PARSER_ERROR', context) || this;\n  }\n  return ParserError;\n})(SiteGeneratorError);\nexports.ParserError = ParserError;\n/**\n * Error thrown when there's an issue with generating components\n */\nvar GeneratorError = /** @class */ (function (_super) {\n  __extends(GeneratorError, _super);\n  function GeneratorError(message, context) {\n    return _super.call(this, message, 'GENERATOR_ERROR', context) || this;\n  }\n  return GeneratorError;\n})(SiteGeneratorError);\nexports.GeneratorError = GeneratorError;\n/**\n * Error thrown when there's an issue with building the website\n */\nvar BuildError = /** @class */ (function (_super) {\n  __extends(BuildError, _super);\n  function BuildError(message, context) {\n    return _super.call(this, message, 'BUILD_ERROR', context) || this;\n  }\n  return BuildError;\n})(SiteGeneratorError);\nexports.BuildError = BuildError;\n/**\n * Error thrown when there's an issue with plugins\n */\nvar PluginError = /** @class */ (function (_super) {\n  __extends(PluginError, _super);\n  function PluginError(message, context) {\n    return _super.call(this, message, 'PLUGIN_ERROR', context) || this;\n  }\n  return PluginError;\n})(SiteGeneratorError);\nexports.PluginError = PluginError;\n/**\n * Error thrown when there's an issue with file system operations\n */\nvar FileSystemError = /** @class */ (function (_super) {\n  __extends(FileSystemError, _super);\n  function FileSystemError(message, context) {\n    return _super.call(this, message, 'FS_ERROR', context) || this;\n  }\n  return FileSystemError;\n})(SiteGeneratorError);\nexports.FileSystemError = FileSystemError;\n/**\n * Error thrown when a feature is not implemented\n */\nvar NotImplementedError = /** @class */ (function (_super) {\n  __extends(NotImplementedError, _super);\n  function NotImplementedError(message, context) {\n    return _super.call(this, message, 'NOT_IMPLEMENTED', context) || this;\n  }\n  return NotImplementedError;\n})(SiteGeneratorError);\nexports.NotImplementedError = NotImplementedError;\n/**\n * Error thrown when there's an issue with templates\n */\nvar TemplateError = /** @class */ (function (_super) {\n  __extends(TemplateError, _super);\n  function TemplateError(message, context) {\n    return _super.call(this, message, 'TEMPLATE_ERROR', context) || this;\n  }\n  return TemplateError;\n})(SiteGeneratorError);\nexports.TemplateError = TemplateError;\n/**\n * Error thrown when there's an issue with validation\n */\nvar ValidationError = /** @class */ (function (_super) {\n  __extends(ValidationError, _super);\n  function ValidationError(message, context) {\n    return _super.call(this, message, 'VALIDATION_ERROR', context) || this;\n  }\n  return ValidationError;\n})(SiteGeneratorError);\nexports.ValidationError = ValidationError;\n/**\n * Global error handler for uncaught exceptions\n */\nfunction setupGlobalErrorHandler(verbose) {\n  if (verbose === void 0) {\n    verbose = false;\n  }\n  process.on('uncaughtException', function (error) {\n    console.error('\\n🔥 Uncaught Exception:');\n    if (error instanceof SiteGeneratorError) {\n      console.error(error.getFormattedMessage());\n    } else {\n      console.error('[UNKNOWN_ERROR] '.concat(error.message));\n    }\n    if (verbose) {\n      console.error('\\nStack Trace:');\n      console.error(error.stack);\n    } else {\n      console.error('\\nRun with --verbose flag for more details.');\n    }\n    process.exit(1);\n  });\n  process.on('unhandledRejection', function (reason, _promise) {\n    console.error('\\n🔥 Unhandled Promise Rejection:');\n    if (reason instanceof SiteGeneratorError) {\n      console.error(reason.getFormattedMessage());\n    } else {\n      console.error('[UNHANDLED_REJECTION] '.concat(reason));\n    }\n    if (verbose) {\n      console.error('\\nStack Trace:');\n      console.error(reason.stack);\n    } else {\n      console.error('\\nRun with --verbose flag for more details.');\n    }\n    process.exit(1);\n  });\n}\n/**\n * Error handler for async functions\n * @param fn Async function to wrap with error handling\n * @returns Wrapped function with error handling\n */\nfunction withErrorHandling(fn) {\n  var _this = this;\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return __awaiter(_this, void 0, void 0, function () {\n      var error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2, , 3]);\n            return [4 /*yield*/, fn.apply(void 0, args)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            error_1 = _a.sent();\n            if (error_1 instanceof SiteGeneratorError) {\n              throw error_1;\n            } else {\n              throw new SiteGeneratorError(\n                error_1.message || 'Unknown error occurred',\n                'INTERNAL_ERROR',\n                { originalError: error_1 }\n              );\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n}\n/**\n * Try-catch wrapper for async functions\n * @param fn Function to execute\n * @param errorHandler Optional error handler\n * @returns Result of the function or error handler\n */\nfunction tryCatch(fn, errorHandler) {\n  return __awaiter(this, void 0, void 0, function () {\n    var error_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2, , 5]);\n          return [4 /*yield*/, fn()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n        case 2:\n          error_2 = _a.sent();\n          if (!errorHandler) return [3 /*break*/, 4];\n          return [4 /*yield*/, errorHandler(error_2)];\n        case 3:\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          throw error_2;\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\n * Try-catch wrapper for sync functions\n * @param fn Function to execute\n * @param errorHandler Optional error handler\n * @returns Result of the function or error handler\n */\nfunction tryCatchSync(fn, errorHandler) {\n  try {\n    return fn();\n  } catch (error) {\n    if (errorHandler) {\n      return errorHandler(error);\n    }\n    throw error;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[233,236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[233,236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[310,313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[310,313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1651,1654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1651,1654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1895,1898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1895,1898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2123,2126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2123,2126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2371,2374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2371,2374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2603,2606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2603,2606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2839,2842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2839,2842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3077,3080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3077,3080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_promise' is defined but never used.","line":142,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4444,4447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4444,4447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base error class for all site generator errors\n * Provides standardized error handling with error codes and contextual information\n */\nexport class SiteGeneratorError extends Error {\n  code: string;\n  context?: Record<string, any>;\n\n  constructor(message: string, code: string, context?: Record<string, any>) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.context = context;\n\n    // Capture stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * Returns a formatted error message with context information\n   */\n  getFormattedMessage(): string {\n    let message = `[${this.code}] ${this.message}`;\n\n    if (this.context && Object.keys(this.context).length > 0) {\n      message += '\\nContext:';\n      for (const [key, value] of Object.entries(this.context)) {\n        message += `\\n  ${key}: ${JSON.stringify(value)}`;\n      }\n    }\n\n    return message;\n  }\n}\n\n/**\n * Error thrown when there's an issue with configuration\n */\nexport class ConfigurationError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'CONFIG_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with parsing documentation\n */\nexport class ParserError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'PARSER_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with generating components\n */\nexport class GeneratorError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'GENERATOR_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with building the website\n */\nexport class BuildError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'BUILD_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with plugins\n */\nexport class PluginError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'PLUGIN_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with file system operations\n */\nexport class FileSystemError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'FS_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when a feature is not implemented\n */\nexport class NotImplementedError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'NOT_IMPLEMENTED', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with templates\n */\nexport class TemplateError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'TEMPLATE_ERROR', context);\n  }\n}\n\n/**\n * Error thrown when there's an issue with validation\n */\nexport class ValidationError extends SiteGeneratorError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'VALIDATION_ERROR', context);\n  }\n}\n\n/**\n * Global error handler for uncaught exceptions\n */\nexport function setupGlobalErrorHandler(verbose = false): void {\n  process.on('uncaughtException', error => {\n    console.error('\\n🔥 Uncaught Exception:');\n\n    if (error instanceof SiteGeneratorError) {\n      console.error(error.getFormattedMessage());\n    } else {\n      console.error(`[UNKNOWN_ERROR] ${error.message}`);\n    }\n\n    if (verbose) {\n      console.error('\\nStack Trace:');\n      console.error(error.stack);\n    } else {\n      console.error('\\nRun with --verbose flag for more details.');\n    }\n\n    process.exit(1);\n  });\n\n  process.on('unhandledRejection', (reason, _promise) => {\n    console.error('\\n🔥 Unhandled Promise Rejection:');\n\n    if (reason instanceof SiteGeneratorError) {\n      console.error(reason.getFormattedMessage());\n    } else {\n      console.error(`[UNHANDLED_REJECTION] ${reason}`);\n    }\n\n    if (verbose) {\n      console.error('\\nStack Trace:');\n      console.error((reason as Error).stack);\n    } else {\n      console.error('\\nRun with --verbose flag for more details.');\n    }\n\n    process.exit(1);\n  });\n}\n\n/**\n * Error handler for async functions\n * @param fn Async function to wrap with error handling\n * @returns Wrapped function with error handling\n */\nexport function withErrorHandling<T extends any[], R>(\n  fn: (...args: T) => Promise<R>\n): (...args: T) => Promise<R> {\n  return async (...args: T): Promise<R> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      if (error instanceof SiteGeneratorError) {\n        throw error;\n      } else {\n        throw new SiteGeneratorError(\n          (error as Error).message || 'Unknown error occurred',\n          'INTERNAL_ERROR',\n          { originalError: error }\n        );\n      }\n    }\n  };\n}\n\n/**\n * Try-catch wrapper for async functions\n * @param fn Function to execute\n * @param errorHandler Optional error handler\n * @returns Result of the function or error handler\n */\nexport async function tryCatch<T>(\n  fn: () => Promise<T>,\n  errorHandler?: (error: unknown) => T | Promise<T>\n): Promise<T> {\n  try {\n    return await fn();\n  } catch (error) {\n    if (errorHandler) {\n      return await errorHandler(error);\n    }\n    throw error;\n  }\n}\n\n/**\n * Try-catch wrapper for sync functions\n * @param fn Function to execute\n * @param errorHandler Optional error handler\n * @returns Result of the function or error handler\n */\nexport function tryCatchSync<T>(fn: () => T, errorHandler?: (error: unknown) => T): T {\n  try {\n    return fn();\n  } catch (error) {\n    if (errorHandler) {\n      return errorHandler(error);\n    }\n    throw error;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/file-watcher.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":4,"column":18,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":5,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":5,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":6,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":6,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2078,2224],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2337,2485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2598,2746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2855,2929],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2940,3027],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3030,3128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3217,3282],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.watchFiles = watchFiles;\nvar chokidar_1 = require('chokidar');\nvar path_1 = require('path');\nvar chalk_1 = require('chalk');\n/**\n * Watches for file changes in the source directory\n * @param sourceDir The directory to watch for changes\n * @param ignorePatterns Patterns to ignore\n * @param onChange Callback function to execute when files change\n * @returns A function to stop watching\n */\nfunction watchFiles(sourceDir, ignorePatterns, onChange) {\n  if (ignorePatterns === void 0) {\n    ignorePatterns = [];\n  }\n  // Convert ignore patterns to absolute paths\n  var absoluteIgnorePatterns = ignorePatterns.map(function (pattern) {\n    if (pattern.startsWith('/')) {\n      return pattern;\n    }\n    return path_1.default.join(sourceDir, pattern);\n  });\n  // Add node_modules and .git to ignore patterns if not already included\n  if (\n    !absoluteIgnorePatterns.some(function (pattern) {\n      return pattern.includes('node_modules');\n    })\n  ) {\n    absoluteIgnorePatterns.push(path_1.default.join(sourceDir, 'node_modules'));\n  }\n  if (\n    !absoluteIgnorePatterns.some(function (pattern) {\n      return pattern.includes('.git');\n    })\n  ) {\n    absoluteIgnorePatterns.push(path_1.default.join(sourceDir, '.git'));\n  }\n  // Create a watcher\n  var watcher = chokidar_1.default.watch(sourceDir, {\n    ignored: absoluteIgnorePatterns,\n    persistent: true,\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 300,\n      pollInterval: 100,\n    },\n  });\n  // Track changed files\n  var changedFiles = new Set();\n  var debounceTimer = null;\n  // Helper function to debounce changes\n  var debounceChanges = function () {\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(function () {\n      if (changedFiles.size > 0) {\n        var files = Array.from(changedFiles);\n        changedFiles.clear();\n        onChange(files);\n      }\n    }, 500);\n  };\n  // Watch for file changes\n  watcher\n    .on('add', function (filePath) {\n      console.log(\n        chalk_1.default.blue(\n          '[INFO] File added: '.concat(path_1.default.relative(sourceDir, filePath))\n        )\n      );\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('change', function (filePath) {\n      console.log(\n        chalk_1.default.blue(\n          '[INFO] File changed: '.concat(path_1.default.relative(sourceDir, filePath))\n        )\n      );\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('unlink', function (filePath) {\n      console.log(\n        chalk_1.default.blue(\n          '[INFO] File deleted: '.concat(path_1.default.relative(sourceDir, filePath))\n        )\n      );\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('error', function (error) {\n      console.log(chalk_1.default.red('[ERROR] Watcher error: '.concat(error)));\n    });\n  console.log(chalk_1.default.blue('[INFO] Watching for changes in '.concat(sourceDir)));\n  console.log(chalk_1.default.blue('[INFO] Ignoring patterns: '.concat(ignorePatterns.join(', '))));\n  // Return a function to stop watching\n  return function () {\n    watcher.close();\n    console.log(chalk_1.default.blue('[INFO] File watcher stopped'));\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/file-watcher.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1898,1982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2087,2173],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2278,2364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2465,2523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2535,2606],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2609,2691],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2775,2830],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as chokidar from 'chokidar';\nimport * as path from 'path';\nimport * as chalk from 'chalk';\n\n/**\n * Watches for file changes in the source directory\n * @param sourceDir The directory to watch for changes\n * @param ignorePatterns Patterns to ignore\n * @param onChange Callback function to execute when files change\n * @returns A function to stop watching\n */\nexport function watchFiles(\n  sourceDir: string,\n  ignorePatterns: string[] = [],\n  onChange: (changedFiles: string[]) => void\n): () => void {\n  // Convert ignore patterns to absolute paths\n  const absoluteIgnorePatterns = ignorePatterns.map(pattern => {\n    if (pattern.startsWith('/')) {\n      return pattern;\n    }\n    return path.join(sourceDir, pattern);\n  });\n\n  // Add node_modules and .git to ignore patterns if not already included\n  if (!absoluteIgnorePatterns.some(pattern => pattern.includes('node_modules'))) {\n    absoluteIgnorePatterns.push(path.join(sourceDir, 'node_modules'));\n  }\n\n  if (!absoluteIgnorePatterns.some(pattern => pattern.includes('.git'))) {\n    absoluteIgnorePatterns.push(path.join(sourceDir, '.git'));\n  }\n\n  // Create a watcher\n  const watcher = chokidar.watch(sourceDir, {\n    ignored: absoluteIgnorePatterns,\n    persistent: true,\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 300,\n      pollInterval: 100,\n    },\n  });\n\n  // Track changed files\n  const changedFiles: Set<string> = new Set();\n  let debounceTimer: NodeJS.Timeout | null = null;\n\n  // Helper function to debounce changes\n  const debounceChanges = () => {\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    debounceTimer = setTimeout(() => {\n      if (changedFiles.size > 0) {\n        const files = Array.from(changedFiles);\n        changedFiles.clear();\n        onChange(files);\n      }\n    }, 500);\n  };\n\n  // Watch for file changes\n  watcher\n    .on('add', filePath => {\n      console.log(chalk.blue(`[INFO] File added: ${path.relative(sourceDir, filePath)}`));\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('change', filePath => {\n      console.log(chalk.blue(`[INFO] File changed: ${path.relative(sourceDir, filePath)}`));\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('unlink', filePath => {\n      console.log(chalk.blue(`[INFO] File deleted: ${path.relative(sourceDir, filePath)}`));\n      changedFiles.add(filePath);\n      debounceChanges();\n    })\n    .on('error', error => {\n      console.log(chalk.red(`[ERROR] Watcher error: ${error}`));\n    });\n\n  console.log(chalk.blue(`[INFO] Watching for changes in ${sourceDir}`));\n  console.log(chalk.blue(`[INFO] Ignoring patterns: ${ignorePatterns.join(', ')}`));\n\n  // Return a function to stop watching\n  return () => {\n    watcher.close();\n    console.log(chalk.blue('[INFO] File watcher stopped'));\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/incremental.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":18,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":18,"endColumn":25},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":19,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":20,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":21,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":21,"endColumn":35},{"ruleId":"no-redeclare","severity":2,"message":"'file' is already defined.","line":225,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":225,"endColumn":15}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nvar __assign =\n  (this && this.__assign) ||\n  function () {\n    __assign =\n      Object.assign ||\n      function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n      };\n    return __assign.apply(this, arguments);\n  };\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.IncrementalManager = void 0;\nvar fs_1 = require('fs');\nvar path_1 = require('path');\nvar crypto_1 = require('crypto');\nvar errors_1 = require('./errors');\n/**\n * Incremental generation manager\n * Tracks file changes to enable incremental builds\n */\nvar IncrementalManager = /** @class */ (function () {\n  function IncrementalManager(options) {\n    // Set default options first, then override with provided options\n    var defaultOptions = {\n      enabled: true,\n      stateFile: '.incremental-state.json',\n      forceRebuild: false,\n    };\n    this.options = __assign(__assign({}, defaultOptions), options);\n    this.state = {\n      timestamp: 0,\n      files: {},\n      outputFiles: {},\n    };\n    this.dirty = false;\n    // Load previous state if available\n    this.loadState();\n  }\n  /**\n   * Load the previous build state\n   */\n  IncrementalManager.prototype.loadState = function () {\n    if (!this.options.enabled) return;\n    try {\n      if (fs_1.default.existsSync(this.options.stateFile)) {\n        var content = fs_1.default.readFileSync(this.options.stateFile, 'utf-8');\n        this.state = JSON.parse(content);\n      }\n    } catch (error) {\n      // If loading fails, start with a fresh state\n      console.warn('Failed to load incremental state: '.concat(error));\n      this.state = {\n        timestamp: 0,\n        files: {},\n        outputFiles: {},\n      };\n    }\n  };\n  /**\n   * Save the current build state\n   */\n  IncrementalManager.prototype.saveState = function () {\n    if (!this.options.enabled || !this.dirty) return;\n    try {\n      this.state.timestamp = Date.now();\n      fs_1.default.writeFileSync(\n        this.options.stateFile,\n        JSON.stringify(this.state, null, 2),\n        'utf-8'\n      );\n      this.dirty = false;\n    } catch (error) {\n      throw new errors_1.FileSystemError('Failed to save incremental state: '.concat(error), {\n        stateFile: this.options.stateFile,\n        error: error,\n      });\n    }\n  };\n  /**\n   * Check if a file has changed since the last build\n   */\n  IncrementalManager.prototype.hasFileChanged = function (filePath) {\n    if (!this.options.enabled || this.options.forceRebuild) {\n      return true;\n    }\n    try {\n      // Check if file exists\n      if (!fs_1.default.existsSync(filePath)) {\n        // If the file was in the previous state, it's been deleted\n        return this.state.files[filePath] !== undefined;\n      }\n      // Get file stats\n      var stats = fs_1.default.statSync(filePath);\n      // Check if file is in the state\n      if (!this.state.files[filePath]) {\n        return true;\n      }\n      var prevState = this.state.files[filePath];\n      // Quick check based on size and modification time\n      if (stats.size !== prevState.size || stats.mtimeMs !== prevState.lastModified) {\n        return true;\n      }\n      // If size and mtime match, compute hash for certainty\n      var content = fs_1.default.readFileSync(filePath, 'utf-8');\n      var hash = this.hashContent(content);\n      return hash !== prevState.hash;\n    } catch (error) {\n      // If there's an error checking the file, assume it changed\n      console.warn('Error checking file '.concat(filePath, ': ').concat(error));\n      return true;\n    }\n  };\n  /**\n   * Update the file state\n   */\n  IncrementalManager.prototype.updateFileState = function (filePath, dependencies) {\n    if (dependencies === void 0) {\n      dependencies = [];\n    }\n    if (!this.options.enabled) return;\n    try {\n      // Check if file exists\n      if (!fs_1.default.existsSync(filePath)) {\n        // If the file was in the previous state, remove it\n        if (this.state.files[filePath]) {\n          delete this.state.files[filePath];\n          this.dirty = true;\n        }\n        return;\n      }\n      // Get file stats\n      var stats = fs_1.default.statSync(filePath);\n      // Read file content and compute hash\n      var content = fs_1.default.readFileSync(filePath, 'utf-8');\n      var hash = this.hashContent(content);\n      // Update state\n      this.state.files[filePath] = {\n        path: filePath,\n        hash: hash,\n        lastModified: stats.mtimeMs,\n        size: stats.size,\n        dependencies: dependencies,\n      };\n      this.dirty = true;\n    } catch (error) {\n      console.warn('Error updating file state for '.concat(filePath, ': ').concat(error));\n    }\n  };\n  /**\n   * Track output files generated from an input file\n   */\n  IncrementalManager.prototype.trackOutputFiles = function (inputFile, outputFiles) {\n    if (!this.options.enabled) return;\n    this.state.outputFiles[inputFile] = outputFiles;\n    this.dirty = true;\n  };\n  /**\n   * Get output files that need to be regenerated\n   */\n  IncrementalManager.prototype.getFilesToRegenerate = function (changedFiles) {\n    if (!this.options.enabled || this.options.forceRebuild) {\n      return Object.keys(this.state.files);\n    }\n    var filesToRegenerate = new Set();\n    // Add changed files\n    for (var _i = 0, changedFiles_1 = changedFiles; _i < changedFiles_1.length; _i++) {\n      var file = changedFiles_1[_i];\n      filesToRegenerate.add(file);\n    }\n    // Add files that depend on changed files\n    for (var _a = 0, _b = Object.entries(this.state.files); _a < _b.length; _a++) {\n      var _c = _b[_a],\n        filePath = _c[0],\n        fileState = _c[1];\n      if (fileState.dependencies) {\n        for (var _d = 0, _e = fileState.dependencies; _d < _e.length; _d++) {\n          var dependency = _e[_d];\n          if (changedFiles.includes(dependency)) {\n            filesToRegenerate.add(filePath);\n            break;\n          }\n        }\n      }\n    }\n    // Add files that generate output files that need to be regenerated\n    for (var _f = 0, _g = Object.entries(this.state.outputFiles); _f < _g.length; _f++) {\n      var _h = _g[_f],\n        inputFile = _h[0],\n        outputFiles = _h[1];\n      for (var _j = 0, outputFiles_1 = outputFiles; _j < outputFiles_1.length; _j++) {\n        var outputFile = outputFiles_1[_j];\n        if (filesToRegenerate.has(outputFile)) {\n          filesToRegenerate.add(inputFile);\n          break;\n        }\n      }\n    }\n    return Array.from(filesToRegenerate);\n  };\n  /**\n   * Get all files that have changed since the last build\n   */\n  IncrementalManager.prototype.getChangedFiles = function (directory) {\n    if (!this.options.enabled) {\n      return this.getAllFiles(directory);\n    }\n    if (this.options.forceRebuild) {\n      var allFiles_3 = this.getAllFiles(directory);\n      // Update state for all files\n      for (var _i = 0, allFiles_1 = allFiles_3; _i < allFiles_1.length; _i++) {\n        var file = allFiles_1[_i];\n        this.updateFileState(file);\n      }\n      return allFiles_3;\n    }\n    var changedFiles = [];\n    var allFiles = this.getAllFiles(directory);\n    // Check each file for changes\n    for (var _a = 0, allFiles_2 = allFiles; _a < allFiles_2.length; _a++) {\n      var file = allFiles_2[_a];\n      if (this.hasFileChanged(file)) {\n        changedFiles.push(file);\n        this.updateFileState(file);\n      }\n    }\n    // Check for deleted files\n    for (var _b = 0, _c = Object.keys(this.state.files); _b < _c.length; _b++) {\n      var filePath = _c[_b];\n      if (!fs_1.default.existsSync(filePath)) {\n        changedFiles.push(filePath);\n        delete this.state.files[filePath];\n        this.dirty = true;\n      }\n    }\n    return changedFiles;\n  };\n  /**\n   * Get all files in a directory recursively\n   */\n  IncrementalManager.prototype.getAllFiles = function (directory) {\n    var files = [];\n    var readDir = function (dir) {\n      var entries = fs_1.default.readdirSync(dir);\n      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n        var entry = entries_1[_i];\n        var fullPath = path_1.default.join(dir, entry);\n        var stats = fs_1.default.statSync(fullPath);\n        if (stats.isDirectory()) {\n          readDir(fullPath);\n        } else {\n          files.push(fullPath);\n        }\n      }\n    };\n    readDir(directory);\n    return files;\n  };\n  /**\n   * Compute a hash of the content\n   */\n  IncrementalManager.prototype.hashContent = function (content) {\n    return crypto_1.default.createHash('md5').update(content).digest('hex');\n  };\n  return IncrementalManager;\n})();\nexports.IncrementalManager = IncrementalManager;\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/incremental.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/logger.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\n/**\n * Logger utility for standardized logging throughout the application\n * Respects the logging configuration from WebsiteGeneratorConfig\n */\nvar __assign =\n  (this && this.__assign) ||\n  function () {\n    __assign =\n      Object.assign ||\n      function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n      };\n    return __assign.apply(this, arguments);\n  };\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.logger = exports.Logger = void 0;\nvar Logger = /** @class */ (function () {\n  function Logger() {\n    this.config = {\n      enabled: true,\n      level: 'info',\n      format: 'text',\n    };\n    // Private constructor to enforce singleton pattern\n  }\n  /**\n   * Get the singleton instance of the logger\n   */\n  Logger.getInstance = function () {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  };\n  /**\n   * Configure the logger\n   * @param config Logger configuration\n   */\n  Logger.prototype.configure = function (config) {\n    this.config = __assign(__assign({}, this.config), config);\n  };\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  Logger.prototype.debug = function (message, context) {\n    if (!this.shouldLog('debug')) return;\n    this.log('debug', message, context);\n  };\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  Logger.prototype.info = function (message, context) {\n    if (!this.shouldLog('info')) return;\n    this.log('info', message, context);\n  };\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  Logger.prototype.warn = function (message, context) {\n    if (!this.shouldLog('warn')) return;\n    this.log('warn', message, context);\n  };\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  Logger.prototype.error = function (message, context) {\n    if (!this.shouldLog('error')) return;\n    this.log('error', message, context);\n  };\n  /**\n   * Determine if a message should be logged based on the current log level\n   * @param level The log level to check\n   * @returns Whether the message should be logged\n   */\n  Logger.prototype.shouldLog = function (level) {\n    if (!this.config.enabled) return false;\n    var levels = ['debug', 'info', 'warn', 'error'];\n    var configLevelIndex = levels.indexOf(this.config.level || 'info');\n    var messageLevelIndex = levels.indexOf(level);\n    return messageLevelIndex >= configLevelIndex;\n  };\n  /**\n   * Format and output a log message\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  Logger.prototype.log = function (level, message, context) {\n    var _a, _b;\n    var timestamp = new Date().toISOString();\n    if (this.config.format === 'json') {\n      (_a = console[level]) === null || _a === void 0\n        ? void 0\n        : _a.call(\n            console,\n            JSON.stringify({\n              timestamp: timestamp,\n              level: level,\n              message: message,\n              context: context,\n            })\n          );\n    } else {\n      var contextStr = context ? ' '.concat(JSON.stringify(context)) : '';\n      (_b = console[level]) === null || _b === void 0\n        ? void 0\n        : _b.call(\n            console,\n            '['\n              .concat(timestamp, '] ')\n              .concat(level.toUpperCase(), ': ')\n              .concat(message)\n              .concat(contextStr)\n          );\n    }\n  };\n  return Logger;\n})();\nexports.Logger = Logger;\n// Export a default logger instance\nexports.logger = Logger.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Logger utility for standardized logging throughout the application\n * Respects the logging configuration from WebsiteGeneratorConfig\n */\n\nexport interface LoggerConfig {\n  enabled?: boolean;\n  level?: 'debug' | 'info' | 'warn' | 'error';\n  format?: 'json' | 'text';\n}\n\nexport class Logger {\n  private static instance: Logger;\n  private config: LoggerConfig = {\n    enabled: true,\n    level: 'info',\n    format: 'text',\n  };\n\n  private constructor() {\n    // Private constructor to enforce singleton pattern\n  }\n\n  /**\n   * Get the singleton instance of the logger\n   */\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  /**\n   * Configure the logger\n   * @param config Logger configuration\n   */\n  public configure(config: LoggerConfig): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Log a debug message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  public debug(message: string, context?: Record<string, unknown>): void {\n    if (!this.shouldLog('debug')) return;\n    this.log('debug', message, context);\n  }\n\n  /**\n   * Log an info message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  public info(message: string, context?: Record<string, unknown>): void {\n    if (!this.shouldLog('info')) return;\n    this.log('info', message, context);\n  }\n\n  /**\n   * Log a warning message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  public warn(message: string, context?: Record<string, unknown>): void {\n    if (!this.shouldLog('warn')) return;\n    this.log('warn', message, context);\n  }\n\n  /**\n   * Log an error message\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  public error(message: string, context?: Record<string, unknown>): void {\n    if (!this.shouldLog('error')) return;\n    this.log('error', message, context);\n  }\n\n  /**\n   * Determine if a message should be logged based on the current log level\n   * @param level The log level to check\n   * @returns Whether the message should be logged\n   */\n  private shouldLog(level: 'debug' | 'info' | 'warn' | 'error'): boolean {\n    if (!this.config.enabled) return false;\n\n    const levels = ['debug', 'info', 'warn', 'error'];\n    const configLevelIndex = levels.indexOf(this.config.level || 'info');\n    const messageLevelIndex = levels.indexOf(level);\n\n    return messageLevelIndex >= configLevelIndex;\n  }\n\n  /**\n   * Format and output a log message\n   * @param level The log level\n   * @param message The message to log\n   * @param context Optional context data\n   */\n  private log(\n    level: 'debug' | 'info' | 'warn' | 'error',\n    message: string,\n    context?: Record<string, unknown>\n  ): void {\n    const timestamp = new Date().toISOString();\n\n    if (this.config.format === 'json') {\n      console[level]?.(\n        JSON.stringify({\n          timestamp,\n          level,\n          message,\n          context,\n        })\n      );\n    } else {\n      const contextStr = context ? ` ${JSON.stringify(context)}` : '';\n      console[level]?.(`[${timestamp}] ${level.toUpperCase()}: ${message}${contextStr}`);\n    }\n  }\n}\n\n// Export a default logger instance\nexport const logger = Logger.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/monemnaifer/Library/CloudStorage/GoogleDrive-monemmacos@gmail.com/My Drive/Strategic AI Integration/Site_Generator/src/utils/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2600,2603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2600,2603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface PerformanceEntry {\n  name: string;\n  startTime: number;\n  endTime: number;\n  duration: number;\n}\n\nexport class PerformanceMonitor {\n  private entries: PerformanceEntry[] = [];\n  private activeMarks: Map<string, number> = new Map();\n\n  /**\n   * Start timing an operation\n   */\n  mark(name: string): void {\n    this.activeMarks.set(name, Date.now());\n  }\n\n  /**\n   * End timing an operation and record the duration\n   */\n  measure(name: string): PerformanceEntry | undefined {\n    const startTime = this.activeMarks.get(name);\n    if (!startTime) {\n      console.warn(`No mark found for: ${name}`);\n      return undefined;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    const entry: PerformanceEntry = {\n      name,\n      startTime,\n      endTime,\n      duration,\n    };\n\n    this.entries.push(entry);\n    this.activeMarks.delete(name);\n\n    return entry;\n  }\n\n  /**\n   * Get all performance entries\n   */\n  getEntries(): PerformanceEntry[] {\n    return [...this.entries];\n  }\n\n  /**\n   * Get entries for a specific operation\n   */\n  getEntriesByName(name: string): PerformanceEntry[] {\n    return this.entries.filter(entry => entry.name === name);\n  }\n\n  /**\n   * Calculate average duration for an operation\n   */\n  getAverageDuration(name: string): number {\n    const entries = this.getEntriesByName(name);\n    if (entries.length === 0) return 0;\n\n    const totalDuration = entries.reduce((sum, entry) => sum + entry.duration, 0);\n    return totalDuration / entries.length;\n  }\n\n  /**\n   * Clear all entries\n   */\n  clear(): void {\n    this.entries = [];\n    this.activeMarks.clear();\n  }\n\n  /**\n   * Generate a performance report\n   */\n  generateReport(): string {\n    const operations = new Set(this.entries.map(entry => entry.name));\n    let report = 'Performance Report\\n';\n    report += '=================\\n\\n';\n\n    for (const operation of operations) {\n      const entries = this.getEntriesByName(operation);\n      const avgDuration = this.getAverageDuration(operation);\n      const minDuration = Math.min(...entries.map(e => e.duration));\n      const maxDuration = Math.max(...entries.map(e => e.duration));\n\n      report += `Operation: ${operation}\\n`;\n      report += `  Count: ${entries.length}\\n`;\n      report += `  Average: ${avgDuration.toFixed(2)}ms\\n`;\n      report += `  Min: ${minDuration}ms\\n`;\n      report += `  Max: ${maxDuration}ms\\n\\n`;\n    }\n\n    return report;\n  }\n\n  /**\n   * Create a performance decorator for class methods\n   */\n  static createMethodDecorator() {\n    return function performanceDecorator(\n      _target: any,\n      propertyKey: string,\n      descriptor: PropertyDescriptor\n    ) {\n      const originalMethod = descriptor.value;\n\n      descriptor.value = function (...args: unknown[]) {\n        const className = this.constructor.name;\n        const methodName = propertyKey;\n        const operationName = `${className}.${methodName}`;\n\n        performance.mark(operationName);\n\n        try {\n          const result = originalMethod.apply(this, args);\n\n          // Handle promises\n          if (result instanceof Promise) {\n            return result.finally(() => {\n              performance.measure(operationName);\n            });\n          }\n\n          performance.measure(operationName);\n          return result;\n        } catch (error) {\n          performance.measure(operationName);\n          throw error;\n        }\n      };\n\n      return descriptor;\n    };\n  }\n}\n\n// Global performance monitor instance\nexport const performance = new PerformanceMonitor();\n","usedDeprecatedRules":[]}]